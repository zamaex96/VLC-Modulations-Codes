
ManchesterRx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  0000052a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009c  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000442  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001cc  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000496  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018f  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000fe  00000000  00000000  000012bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000013b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 eb       	ldi	r30, 0xB6	; 182
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <main>
  c6:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <serial_init>:
//-----------------------------------serial----------------------------------------
void serial_init(void) 
{
  unsigned int baudrate[15] ={416,207,103,68,51,34,25,16,12,8,3,3,1,0}; 

  UBRR1L = baudrate[9];
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = baudrate[9]>>8;      
  d4:	10 92 98 00 	sts	0x0098, r1
  
  UBRR0L = baudrate[9];
  d8:	89 b9       	out	0x09, r24	; 9
  UBRR0H = baudrate[9]>>8;         
  da:	10 92 90 00 	sts	0x0090, r1
   
  UCSR1C = (1 << UCSZ1) | (1 << UCSZ0);  // no parity ,  stop bit 1 , data 8
  de:	96 e0       	ldi	r25, 0x06	; 6
  e0:	90 93 9d 00 	sts	0x009D, r25
  UCSR1B = (1 << TXEN) | (1 << RXEN);
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	80 93 9a 00 	sts	0x009A, r24
  //double baudrate 
  UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);  //serial 8-bit format. no parity, stop bit 1, data 8
  ea:	90 93 95 00 	sts	0x0095, r25
  UCSR0B = (1 << TXEN) | (1 << RXEN);    //enable tx rx located in control reg UCSR1B
  ee:	8a b9       	out	0x0a, r24	; 10
                                         //When set, these two bits turn on the serial buffers to allow for serial communications
}
  f0:	08 95       	ret

000000f2 <transmit>:

void transmit(unsigned char data)
{
  f2:	98 2f       	mov	r25, r24
while(!(UCSR1A & (1<<UDRE1)));
  f4:	80 91 9b 00 	lds	r24, 0x009B
  f8:	85 ff       	sbrs	r24, 5
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <transmit+0x2>
UDR1=data;
  fc:	90 93 9c 00 	sts	0x009C, r25

}
 100:	08 95       	ret

00000102 <Timer1_init>:
{

	//unsigned int cycles;
	unsigned long cycles;
  	// Initializing Timer
	TCCR1A = 0;                 // clear control register A 
 102:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << WGM13); // set mode 8: phase and frequency correct pwm, stop the timer
 104:	8e b5       	in	r24, 0x2e	; 46
 106:	80 61       	ori	r24, 0x10	; 16
 108:	8e bd       	out	0x2e, r24	; 46
 	
	unsigned char oldSREG = SREG;
 10a:	2f b7       	in	r18, 0x3f	; 63
	cli();
 10c:	f8 94       	cli

	//cycles = 20; // 2/(16000000/8)*10 = 10us, *20 = 20us (50KHz)
	cycles = 50;	// 2/(16000000/64)*125 = 1ms , *25 = 0.2ms
	ICR1 = cycles;
 10e:	82 e3       	ldi	r24, 0x32	; 50
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	97 bd       	out	0x27, r25	; 39
 114:	86 bd       	out	0x26, r24	; 38
	//sei();
	SREG = oldSREG;
 116:	2f bf       	out	0x3f, r18	; 63

	
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
 118:	8e b5       	in	r24, 0x2e	; 46
 11a:	88 7f       	andi	r24, 0xF8	; 248
 11c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11);	// prescale: clk / 8
 11e:	8e b5       	in	r24, 0x2e	; 46
 120:	82 60       	ori	r24, 0x02	; 2
 122:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64
//	TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64

	

}
 124:	08 95       	ret

00000126 <__vector_14>:

ISR(TIMER1_OVF_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
	cnt++;
 138:	80 91 00 01 	lds	r24, 0x0100
 13c:	90 91 01 01 	lds	r25, 0x0101
 140:	a0 91 02 01 	lds	r26, 0x0102
 144:	b0 91 03 01 	lds	r27, 0x0103
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	a1 1d       	adc	r26, r1
 14c:	b1 1d       	adc	r27, r1
 14e:	80 93 00 01 	sts	0x0100, r24
 152:	90 93 01 01 	sts	0x0101, r25
 156:	a0 93 02 01 	sts	0x0102, r26
 15a:	b0 93 03 01 	sts	0x0103, r27
}
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <sync_mppm>:
	byte_placeholder1	= 0xFF80;
	predata				= 0x00;

	temp = PINA;

	while(!(CHECKBIT(temp, bit_to_check))){temp = PINA; }//transmit(0x88);}
 170:	89 b3       	in	r24, 0x19	; 25
 172:	80 ff       	sbrs	r24, 0
 174:	fd cf       	rjmp	.-6      	; 0x170 <sync_mppm>
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	c9 01       	movw	r24, r18
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25

	while(1)
	{
		
		temp =PINA;
		if(CHECKBIT(temp, bit_to_check)){
 180:	c8 9b       	sbis	0x19, 0	; 25
 182:	03 c0       	rjmp	.+6      	; 0x18a <sync_mppm+0x1a>
			
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;			
 184:	9c 01       	movw	r18, r24
 186:	21 60       	ori	r18, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <sync_mppm+0x1c>
			}	
		else
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 18a:	9c 01       	movw	r18, r24
				byte_placeholder = byte_placeholder|bit_to_shift;	
			}
			i++;
			
			cnt1 = 0, cnt=0;
 18c:	10 92 00 01 	sts	0x0100, r1
 190:	10 92 01 01 	sts	0x0101, r1
 194:	10 92 02 01 	sts	0x0102, r1
 198:	10 92 03 01 	sts	0x0103, r1
			while(cnt1==0)
			{
				cnt1 = cnt;
 19c:	80 91 00 01 	lds	r24, 0x0100
 1a0:	90 91 01 01 	lds	r25, 0x0101
 1a4:	a0 91 02 01 	lds	r26, 0x0102
 1a8:	b0 91 03 01 	lds	r27, 0x0103
				byte_placeholder = byte_placeholder|bit_to_shift;	
			}
			i++;
			
			cnt1 = 0, cnt=0;
			while(cnt1==0)
 1ac:	89 2b       	or	r24, r25
 1ae:	b1 f3       	breq	.-20     	; 0x19c <sync_mppm+0x2c>
			{
				cnt1 = cnt;
			}
			if(byte_placeholder == 0xAAAA)
 1b0:	8a ea       	ldi	r24, 0xAA	; 170
 1b2:	2a 3a       	cpi	r18, 0xAA	; 170
 1b4:	38 07       	cpc	r19, r24
 1b6:	09 f7       	brne	.-62     	; 0x17a <sync_mppm+0xa>
			break;

	}


}
 1b8:	08 95       	ret

000001ba <sync_mppm_B>:
	byte_placeholder1	= 0xFF80;
	predata				= 0x00;

	temp = PINB;

	while(!(CHECKBIT(temp, bit_to_check))){temp = PINB; }//transmit(0x88);}
 1ba:	86 b3       	in	r24, 0x16	; 22
 1bc:	80 ff       	sbrs	r24, 0
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <sync_mppm_B>
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	c9 01       	movw	r24, r18
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25

	while(1)
	{
		
		temp =PINB;
		if(CHECKBIT(temp, bit_to_check)){
 1ca:	b0 9b       	sbis	0x16, 0	; 22
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <sync_mppm_B+0x1a>
			
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;			
 1ce:	9c 01       	movw	r18, r24
 1d0:	21 60       	ori	r18, 0x01	; 1
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <sync_mppm_B+0x1c>
			}	
		else
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 1d4:	9c 01       	movw	r18, r24
				byte_placeholder = byte_placeholder|bit_to_shift;	
			}
			i++;
			
			cnt1 = 0, cnt=0;
 1d6:	10 92 00 01 	sts	0x0100, r1
 1da:	10 92 01 01 	sts	0x0101, r1
 1de:	10 92 02 01 	sts	0x0102, r1
 1e2:	10 92 03 01 	sts	0x0103, r1
			while(cnt1==0)
			{
				cnt1 = cnt;
 1e6:	80 91 00 01 	lds	r24, 0x0100
 1ea:	90 91 01 01 	lds	r25, 0x0101
 1ee:	a0 91 02 01 	lds	r26, 0x0102
 1f2:	b0 91 03 01 	lds	r27, 0x0103
				byte_placeholder = byte_placeholder|bit_to_shift;	
			}
			i++;
			
			cnt1 = 0, cnt=0;
			while(cnt1==0)
 1f6:	89 2b       	or	r24, r25
 1f8:	b1 f3       	breq	.-20     	; 0x1e6 <sync_mppm_B+0x2c>
			{
				cnt1 = cnt;
			}
			if(byte_placeholder == 0xAAAA)
 1fa:	8a ea       	ldi	r24, 0xAA	; 170
 1fc:	2a 3a       	cpi	r18, 0xAA	; 170
 1fe:	38 07       	cpc	r19, r24
 200:	09 f7       	brne	.-62     	; 0x1c4 <sync_mppm_B+0xa>
			break;

	}


}
 202:	08 95       	ret

00000204 <data_mppm>:





unsigned int data_mppm(){
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	df 93       	push	r29
 20a:	cf 93       	push	r28
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	a8 97       	sbiw	r28, 0x28	; 40
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	ae 01       	movw	r20, r28
 21e:	4f 5f       	subi	r20, 0xFF	; 255
 220:	5f 4f       	sbci	r21, 0xFF	; 255
 222:	fa 01       	movw	r30, r20
	while(flag<16)
	{
		temp = PINA;
		if(CHECKBIT(temp, bit_to_check)){
			
			raw[i] = 1;
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	30 e0       	ldi	r19, 0x00	; 0





unsigned int data_mppm(){
 228:	8e 01       	movw	r16, r28
 22a:	0f 5d       	subi	r16, 0xDF	; 223
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
	predata				= 0x00;

	while(flag<16)
	{
		temp = PINA;
		if(CHECKBIT(temp, bit_to_check)){
 22e:	c8 9b       	sbis	0x19, 0	; 25
 230:	03 c0       	rjmp	.+6      	; 0x238 <data_mppm+0x34>
			
			raw[i] = 1;
 232:	31 83       	std	Z+1, r19	; 0x01
 234:	20 83       	st	Z, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <data_mppm+0x38>
		}
		else
		{
			raw[i] = 0;
 238:	11 82       	std	Z+1, r1	; 0x01
 23a:	10 82       	st	Z, r1
		}
		flag++;
		i++;
		cnt1 = 0, cnt=0;
 23c:	10 92 00 01 	sts	0x0100, r1
 240:	10 92 01 01 	sts	0x0101, r1
 244:	10 92 02 01 	sts	0x0102, r1
 248:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 24c:	80 91 00 01 	lds	r24, 0x0100
 250:	90 91 01 01 	lds	r25, 0x0101
 254:	a0 91 02 01 	lds	r26, 0x0102
 258:	b0 91 03 01 	lds	r27, 0x0103
			raw[i] = 0;
		}
		flag++;
		i++;
		cnt1 = 0, cnt=0;
		while(cnt1==0)
 25c:	89 2b       	or	r24, r25
 25e:	b1 f3       	breq	.-20     	; 0x24c <data_mppm+0x48>
 260:	32 96       	adiw	r30, 0x02	; 2
	bit_to_check 		= 0x01;
	byte_placeholder	= 0x00;
	byte_placeholder1	= 0xFF80;
	predata				= 0x00;

	while(flag<16)
 262:	e0 17       	cp	r30, r16
 264:	f1 07       	cpc	r31, r17
 266:	19 f7       	brne	.-58     	; 0x22e <data_mppm+0x2a>
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
	
	}

	for(i=0;i<16;i+=4)
	{
	if(raw[i] == 0)
 26c:	fa 01       	movw	r30, r20
 26e:	80 81       	ld	r24, Z
 270:	91 81       	ldd	r25, Z+1	; 0x01
 272:	62 81       	ldd	r22, Z+2	; 0x02
 274:	73 81       	ldd	r23, Z+3	; 0x03
 276:	89 2b       	or	r24, r25
 278:	a1 f4       	brne	.+40     	; 0x2a2 <data_mppm+0x9e>
 27a:	84 81       	ldd	r24, Z+4	; 0x04
 27c:	95 81       	ldd	r25, Z+5	; 0x05
	{
		if(raw[i+1]==0)
 27e:	67 2b       	or	r22, r23
 280:	41 f4       	brne	.+16     	; 0x292 <data_mppm+0x8e>
		{
			if(raw[i+2] == 1)
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	11 f5       	brne	.+68     	; 0x2ca <data_mppm+0xc6>
			{
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
 286:	22 0f       	add	r18, r18
 288:	33 1f       	adc	r19, r19
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 28e:	22 60       	ori	r18, 0x02	; 2
 290:	1c c0       	rjmp	.+56     	; 0x2ca <data_mppm+0xc6>
				byte_placeholder = byte_placeholder|bit_to_shift;
			}
		}
		else
		{
			if(raw[i+2] == 1)
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	d1 f4       	brne	.+52     	; 0x2ca <data_mppm+0xc6>
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
				byte_placeholder = byte_placeholder|bit_to_shift;
 29e:	21 60       	ori	r18, 0x01	; 1
 2a0:	14 c0       	rjmp	.+40     	; 0x2ca <data_mppm+0xc6>
 2a2:	fa 01       	movw	r30, r20
 2a4:	84 81       	ldd	r24, Z+4	; 0x04
 2a6:	95 81       	ldd	r25, Z+5	; 0x05
			}
		}
	}
	else
	{
		if(raw[i+1] == 1)
 2a8:	61 30       	cpi	r22, 0x01	; 1
 2aa:	71 05       	cpc	r23, r1
 2ac:	39 f4       	brne	.+14     	; 0x2bc <data_mppm+0xb8>
		{
			if(raw[i+2] == 0)
 2ae:	89 2b       	or	r24, r25
 2b0:	61 f4       	brne	.+24     	; 0x2ca <data_mppm+0xc6>
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	22 0f       	add	r18, r18
 2b8:	33 1f       	adc	r19, r19
 2ba:	07 c0       	rjmp	.+14     	; 0x2ca <data_mppm+0xc6>
				byte_placeholder = byte_placeholder|bit_to_shift;
			}
		}
		else
		{
			if(raw[i+2] == 1)
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	29 f4       	brne	.+10     	; 0x2ca <data_mppm+0xc6>
			{
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
 2c8:	23 60       	ori	r18, 0x03	; 3
 2ca:	48 5f       	subi	r20, 0xF8	; 248
 2cc:	5f 4f       	sbci	r21, 0xFF	; 255
		}
		
	
	}

	for(i=0;i<16;i+=4)
 2ce:	40 17       	cp	r20, r16
 2d0:	51 07       	cpc	r21, r17
 2d2:	61 f6       	brne	.-104    	; 0x26c <data_mppm+0x68>
	}
	}
	
	return byte_placeholder;

}
 2d4:	c9 01       	movw	r24, r18
 2d6:	a8 96       	adiw	r28, 0x28	; 40
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	f8 94       	cli
 2dc:	de bf       	out	0x3e, r29	; 62
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	cd bf       	out	0x3d, r28	; 61
 2e2:	cf 91       	pop	r28
 2e4:	df 91       	pop	r29
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <data_mppm_B>:


unsigned int data_mppm_B(){
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	df 93       	push	r29
 2f2:	cf 93       	push	r28
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	a8 97       	sbiw	r28, 0x28	; 40
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	ae 01       	movw	r20, r28
 306:	4f 5f       	subi	r20, 0xFF	; 255
 308:	5f 4f       	sbci	r21, 0xFF	; 255
 30a:	fa 01       	movw	r30, r20
	while(flag<16)
	{
		temp = PINB;
		if(CHECKBIT(temp, bit_to_check)){
			
			raw[i] = 1;
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
	return byte_placeholder;

}


unsigned int data_mppm_B(){
 310:	8e 01       	movw	r16, r28
 312:	0f 5d       	subi	r16, 0xDF	; 223
 314:	1f 4f       	sbci	r17, 0xFF	; 255
	predata				= 0x00;

	while(flag<16)
	{
		temp = PINB;
		if(CHECKBIT(temp, bit_to_check)){
 316:	b0 9b       	sbis	0x16, 0	; 22
 318:	03 c0       	rjmp	.+6      	; 0x320 <data_mppm_B+0x34>
			
			raw[i] = 1;
 31a:	31 83       	std	Z+1, r19	; 0x01
 31c:	20 83       	st	Z, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <data_mppm_B+0x38>
		}
		else
		{
			raw[i] = 0;
 320:	11 82       	std	Z+1, r1	; 0x01
 322:	10 82       	st	Z, r1
		}
		flag++;
		i++;
		cnt1 = 0, cnt=0;
 324:	10 92 00 01 	sts	0x0100, r1
 328:	10 92 01 01 	sts	0x0101, r1
 32c:	10 92 02 01 	sts	0x0102, r1
 330:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 334:	80 91 00 01 	lds	r24, 0x0100
 338:	90 91 01 01 	lds	r25, 0x0101
 33c:	a0 91 02 01 	lds	r26, 0x0102
 340:	b0 91 03 01 	lds	r27, 0x0103
			raw[i] = 0;
		}
		flag++;
		i++;
		cnt1 = 0, cnt=0;
		while(cnt1==0)
 344:	89 2b       	or	r24, r25
 346:	b1 f3       	breq	.-20     	; 0x334 <data_mppm_B+0x48>
 348:	32 96       	adiw	r30, 0x02	; 2
	bit_to_check 		= 0x01;
	byte_placeholder	= 0x00;
	byte_placeholder1	= 0xFF80;
	predata				= 0x00;

	while(flag<16)
 34a:	e0 17       	cp	r30, r16
 34c:	f1 07       	cpc	r31, r17
 34e:	19 f7       	brne	.-58     	; 0x316 <data_mppm_B+0x2a>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
	
	}

	for(i=0;i<16;i+=4)
	{
	if(raw[i] == 0)
 354:	fa 01       	movw	r30, r20
 356:	80 81       	ld	r24, Z
 358:	91 81       	ldd	r25, Z+1	; 0x01
 35a:	62 81       	ldd	r22, Z+2	; 0x02
 35c:	73 81       	ldd	r23, Z+3	; 0x03
 35e:	89 2b       	or	r24, r25
 360:	a1 f4       	brne	.+40     	; 0x38a <data_mppm_B+0x9e>
 362:	84 81       	ldd	r24, Z+4	; 0x04
 364:	95 81       	ldd	r25, Z+5	; 0x05
	{
		if(raw[i+1]==0)
 366:	67 2b       	or	r22, r23
 368:	41 f4       	brne	.+16     	; 0x37a <data_mppm_B+0x8e>
		{
			if(raw[i+2] == 1)
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	11 f5       	brne	.+68     	; 0x3b2 <data_mppm_B+0xc6>
			{
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 376:	22 60       	ori	r18, 0x02	; 2
 378:	1c c0       	rjmp	.+56     	; 0x3b2 <data_mppm_B+0xc6>
				byte_placeholder = byte_placeholder|bit_to_shift;
			}
		}
		else
		{
			if(raw[i+2] == 1)
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	d1 f4       	brne	.+52     	; 0x3b2 <data_mppm_B+0xc6>
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	22 0f       	add	r18, r18
 384:	33 1f       	adc	r19, r19
				byte_placeholder = byte_placeholder|bit_to_shift;
 386:	21 60       	ori	r18, 0x01	; 1
 388:	14 c0       	rjmp	.+40     	; 0x3b2 <data_mppm_B+0xc6>
 38a:	fa 01       	movw	r30, r20
 38c:	84 81       	ldd	r24, Z+4	; 0x04
 38e:	95 81       	ldd	r25, Z+5	; 0x05
			}
		}
	}
	else
	{
		if(raw[i+1] == 1)
 390:	61 30       	cpi	r22, 0x01	; 1
 392:	71 05       	cpc	r23, r1
 394:	39 f4       	brne	.+14     	; 0x3a4 <data_mppm_B+0xb8>
		{
			if(raw[i+2] == 0)
 396:	89 2b       	or	r24, r25
 398:	61 f4       	brne	.+24     	; 0x3b2 <data_mppm_B+0xc6>
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <data_mppm_B+0xc6>
				byte_placeholder = byte_placeholder|bit_to_shift;
			}
		}
		else
		{
			if(raw[i+2] == 1)
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	29 f4       	brne	.+10     	; 0x3b2 <data_mppm_B+0xc6>
			{
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	22 0f       	add	r18, r18
 3ae:	33 1f       	adc	r19, r19
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
 3b0:	23 60       	ori	r18, 0x03	; 3
 3b2:	48 5f       	subi	r20, 0xF8	; 248
 3b4:	5f 4f       	sbci	r21, 0xFF	; 255
		}
		
	
	}

	for(i=0;i<16;i+=4)
 3b6:	40 17       	cp	r20, r16
 3b8:	51 07       	cpc	r21, r17
 3ba:	61 f6       	brne	.-104    	; 0x354 <data_mppm_B+0x68>
	}
	}
	
	return byte_placeholder;

}
 3bc:	c9 01       	movw	r24, r18
 3be:	a8 96       	adiw	r28, 0x28	; 40
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	f8 94       	cli
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	cd bf       	out	0x3d, r28	; 61
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	08 95       	ret

000003d4 <main>:

//Main Program----------------------------------------------------------------------------
int main(void){
 3d4:	cf 92       	push	r12
 3d6:	df 92       	push	r13
 3d8:	ef 92       	push	r14
 3da:	ff 92       	push	r15
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	df 93       	push	r29
 3e2:	cf 93       	push	r28
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	a8 97       	sbiw	r28, 0x28	; 40
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61

	serial_init(); 
 3f4:	0e 94 67 00 	call	0xce	; 0xce <serial_init>
	Timer1_init(); 
 3f8:	0e 94 81 00 	call	0x102	; 0x102 <Timer1_init>
	DDRA=0x00;
 3fc:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0x00;
 3fe:	17 ba       	out	0x17, r1	; 23
	PORTA=0xFF;
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	8b bb       	out	0x1b, r24	; 27
	PORTB=0xFF;
 404:	88 bb       	out	0x18, r24	; 24
	TIMSK |= 0x04;
 406:	87 b7       	in	r24, 0x37	; 55
 408:	84 60       	ori	r24, 0x04	; 4
 40a:	87 bf       	out	0x37, r24	; 55
	SREG |= 0x80;
 40c:	8f b7       	in	r24, 0x3f	; 63
 40e:	80 68       	ori	r24, 0x80	; 128
 410:	8f bf       	out	0x3f, r24	; 63
}

void transmit(unsigned char data)
{
while(!(UCSR1A & (1<<UDRE1)));
UDR1=data;
 412:	cc 24       	eor	r12, r12
 414:	ca 94       	dec	r12
	data[15] = data_mppm_B();
	data[16] = data_mppm_B();
	data[17] = data_mppm_B();*/
	transmit(0xFF);
	transmit(0x80);
	for(j=0;j<9;j++)
 416:	20 e8       	ldi	r18, 0x80	; 128
 418:	d2 2e       	mov	r13, r18
 41a:	7e 01       	movw	r14, r28
 41c:	08 94       	sec
 41e:	e1 1c       	adc	r14, r1
 420:	f1 1c       	adc	r15, r1
 422:	8e 01       	movw	r16, r28
 424:	0d 5e       	subi	r16, 0xED	; 237
 426:	1f 4f       	sbci	r17, 0xFF	; 255
	TIMSK |= 0x04;
	SREG |= 0x80;
	unsigned int data[20];
	unsigned int c,j;
	while(1){
	sync_mppm();
 428:	0e 94 b8 00 	call	0x170	; 0x170 <sync_mppm>
	data[0] = data_mppm();
 42c:	0e 94 02 01 	call	0x204	; 0x204 <data_mppm>
 430:	9a 83       	std	Y+2, r25	; 0x02
 432:	89 83       	std	Y+1, r24	; 0x01
	data[1] = data_mppm();
 434:	0e 94 02 01 	call	0x204	; 0x204 <data_mppm>
 438:	9c 83       	std	Y+4, r25	; 0x04
 43a:	8b 83       	std	Y+3, r24	; 0x03
	data[2] = data_mppm();
 43c:	0e 94 02 01 	call	0x204	; 0x204 <data_mppm>
 440:	9e 83       	std	Y+6, r25	; 0x06
 442:	8d 83       	std	Y+5, r24	; 0x05
	data[3] = data_mppm();
 444:	0e 94 02 01 	call	0x204	; 0x204 <data_mppm>
 448:	98 87       	std	Y+8, r25	; 0x08
 44a:	8f 83       	std	Y+7, r24	; 0x07
	data[4] = data_mppm();
 44c:	0e 94 02 01 	call	0x204	; 0x204 <data_mppm>
 450:	9a 87       	std	Y+10, r25	; 0x0a
 452:	89 87       	std	Y+9, r24	; 0x09
	data[5] = data_mppm();
 454:	0e 94 02 01 	call	0x204	; 0x204 <data_mppm>
 458:	9c 87       	std	Y+12, r25	; 0x0c
 45a:	8b 87       	std	Y+11, r24	; 0x0b
	data[6] = data_mppm();
 45c:	0e 94 02 01 	call	0x204	; 0x204 <data_mppm>
 460:	9e 87       	std	Y+14, r25	; 0x0e
 462:	8d 87       	std	Y+13, r24	; 0x0d
	data[7] = data_mppm();
 464:	0e 94 02 01 	call	0x204	; 0x204 <data_mppm>
 468:	98 8b       	std	Y+16, r25	; 0x10
 46a:	8f 87       	std	Y+15, r24	; 0x0f
	data[8] = data_mppm();
 46c:	0e 94 02 01 	call	0x204	; 0x204 <data_mppm>
 470:	9a 8b       	std	Y+18, r25	; 0x12
 472:	89 8b       	std	Y+17, r24	; 0x11
                                         //When set, these two bits turn on the serial buffers to allow for serial communications
}

void transmit(unsigned char data)
{
while(!(UCSR1A & (1<<UDRE1)));
 474:	80 91 9b 00 	lds	r24, 0x009B
 478:	85 ff       	sbrs	r24, 5
 47a:	fc cf       	rjmp	.-8      	; 0x474 <main+0xa0>
UDR1=data;
 47c:	c0 92 9c 00 	sts	0x009C, r12
                                         //When set, these two bits turn on the serial buffers to allow for serial communications
}

void transmit(unsigned char data)
{
while(!(UCSR1A & (1<<UDRE1)));
 480:	80 91 9b 00 	lds	r24, 0x009B
 484:	85 ff       	sbrs	r24, 5
 486:	fc cf       	rjmp	.-8      	; 0x480 <main+0xac>
UDR1=data;
 488:	d0 92 9c 00 	sts	0x009C, r13
 48c:	f7 01       	movw	r30, r14
	data[17] = data_mppm_B();*/
	transmit(0xFF);
	transmit(0x80);
	for(j=0;j<9;j++)
	{
		transmit(data[j]);
 48e:	90 81       	ld	r25, Z
                                         //When set, these two bits turn on the serial buffers to allow for serial communications
}

void transmit(unsigned char data)
{
while(!(UCSR1A & (1<<UDRE1)));
 490:	80 91 9b 00 	lds	r24, 0x009B
 494:	85 ff       	sbrs	r24, 5
 496:	fc cf       	rjmp	.-8      	; 0x490 <main+0xbc>
UDR1=data;
 498:	90 93 9c 00 	sts	0x009C, r25
 49c:	32 96       	adiw	r30, 0x02	; 2
	data[15] = data_mppm_B();
	data[16] = data_mppm_B();
	data[17] = data_mppm_B();*/
	transmit(0xFF);
	transmit(0x80);
	for(j=0;j<9;j++)
 49e:	e0 17       	cp	r30, r16
 4a0:	f1 07       	cpc	r31, r17
 4a2:	a9 f7       	brne	.-22     	; 0x48e <main+0xba>
                                         //When set, these two bits turn on the serial buffers to allow for serial communications
}

void transmit(unsigned char data)
{
while(!(UCSR1A & (1<<UDRE1)));
 4a4:	80 91 9b 00 	lds	r24, 0x009B
 4a8:	85 ff       	sbrs	r24, 5
 4aa:	fc cf       	rjmp	.-8      	; 0x4a4 <main+0xd0>
UDR1=data;
 4ac:	10 92 9c 00 	sts	0x009C, r1
 4b0:	bb cf       	rjmp	.-138    	; 0x428 <main+0x54>

000004b2 <_exit>:
 4b2:	f8 94       	cli

000004b4 <__stop_program>:
 4b4:	ff cf       	rjmp	.-2      	; 0x4b4 <__stop_program>
