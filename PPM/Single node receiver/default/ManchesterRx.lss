
ManchesterRx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  0000046e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009a  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003f9  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000197  00000000  00000000  00000921  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003b7  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018c  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001b6  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 b8 01 	call	0x370	; 0x370 <main>
  c6:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <serial_init>:
//-----------------------------------serial----------------------------------------
void serial_init(void) 
{
  unsigned int baudrate[15] ={416,207,103,68,51,34,25,16,12,8,3,3,1,0}; 

  UBRR1L = baudrate[9];
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = baudrate[9]>>8;      
  d4:	10 92 98 00 	sts	0x0098, r1
  
  UBRR0L = baudrate[9];
  d8:	89 b9       	out	0x09, r24	; 9
  UBRR0H = baudrate[9]>>8;         
  da:	10 92 90 00 	sts	0x0090, r1
   
  UCSR1C = (1 << UCSZ1) | (1 << UCSZ0);  // no parity ,  stop bit 1 , data 8
  de:	96 e0       	ldi	r25, 0x06	; 6
  e0:	90 93 9d 00 	sts	0x009D, r25
  UCSR1B = (1 << TXEN) | (1 << RXEN);
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	80 93 9a 00 	sts	0x009A, r24
  //double baudrate 
  UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);  //serial 8-bit format. no parity, stop bit 1, data 8
  ea:	90 93 95 00 	sts	0x0095, r25
  UCSR0B = (1 << TXEN) | (1 << RXEN);    //enable tx rx located in control reg UCSR1B
  ee:	8a b9       	out	0x0a, r24	; 10
                                         //When set, these two bits turn on the serial buffers to allow for serial communications
}
  f0:	08 95       	ret

000000f2 <transmit>:

void transmit(unsigned char data)
{
  f2:	98 2f       	mov	r25, r24
while(!(UCSR1A & (1<<UDRE1)));
  f4:	80 91 9b 00 	lds	r24, 0x009B
  f8:	85 ff       	sbrs	r24, 5
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <transmit+0x2>
UDR1=data;
  fc:	90 93 9c 00 	sts	0x009C, r25

}
 100:	08 95       	ret

00000102 <Timer1_init>:
{

	//unsigned int cycles;
	unsigned long cycles;
  	// Initializing Timer
	TCCR1A = 0;                 // clear control register A 
 102:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << WGM13); // set mode 8: phase and frequency correct pwm, stop the timer
 104:	8e b5       	in	r24, 0x2e	; 46
 106:	80 61       	ori	r24, 0x10	; 16
 108:	8e bd       	out	0x2e, r24	; 46
 	
	unsigned char oldSREG = SREG;
 10a:	2f b7       	in	r18, 0x3f	; 63
	cli();
 10c:	f8 94       	cli

	//cycles = 20; // 2/(16000000/8)*10 = 10us, *20 = 20us (50KHz)
	cycles = 50;	// 2/(16000000/64)*125 = 1ms , *25 = 0.2ms
	ICR1 = cycles;
 10e:	82 e3       	ldi	r24, 0x32	; 50
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	97 bd       	out	0x27, r25	; 39
 114:	86 bd       	out	0x26, r24	; 38
	//sei();
	SREG = oldSREG;
 116:	2f bf       	out	0x3f, r18	; 63

	
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
 118:	8e b5       	in	r24, 0x2e	; 46
 11a:	88 7f       	andi	r24, 0xF8	; 248
 11c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11);	// prescale: clk / 8
 11e:	8e b5       	in	r24, 0x2e	; 46
 120:	82 60       	ori	r24, 0x02	; 2
 122:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64

	

}
 124:	08 95       	ret

00000126 <__vector_14>:

ISR(TIMER1_OVF_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
	cnt++;
 138:	80 91 00 01 	lds	r24, 0x0100
 13c:	90 91 01 01 	lds	r25, 0x0101
 140:	a0 91 02 01 	lds	r26, 0x0102
 144:	b0 91 03 01 	lds	r27, 0x0103
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	a1 1d       	adc	r26, r1
 14c:	b1 1d       	adc	r27, r1
 14e:	80 93 00 01 	sts	0x0100, r24
 152:	90 93 01 01 	sts	0x0101, r25
 156:	a0 93 02 01 	sts	0x0102, r26
 15a:	b0 93 03 01 	sts	0x0103, r27
}
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <ppm_sycn>:
	bit_to_check 		= 0x01;
	byte_placeholder	= 0x00;
	byte_placeholder1	= 0xFF80;
	predata				= 0x00;
	temp = PINA;
	while(!(CHECKBIT(temp, bit_to_check))){temp = PINA; }//transmit(0x88);}
 170:	89 b3       	in	r24, 0x19	; 25
 172:	80 ff       	sbrs	r24, 0
 174:	fd cf       	rjmp	.-6      	; 0x170 <ppm_sycn>
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
	while(1)
	{
	
	
		cnt1 = 0, cnt=0;
 17a:	10 92 00 01 	sts	0x0100, r1
 17e:	10 92 01 01 	sts	0x0101, r1
 182:	10 92 02 01 	sts	0x0102, r1
 186:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 18a:	80 91 00 01 	lds	r24, 0x0100
 18e:	90 91 01 01 	lds	r25, 0x0101
 192:	a0 91 02 01 	lds	r26, 0x0102
 196:	b0 91 03 01 	lds	r27, 0x0103
	while(1)
	{
	
	
		cnt1 = 0, cnt=0;
		while(cnt1==0)
 19a:	89 2b       	or	r24, r25
 19c:	b1 f3       	breq	.-20     	; 0x18a <ppm_sycn+0x1a>
 19e:	ca 01       	movw	r24, r20
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
			cnt1 = cnt;
		}
			temp = PINA;	
		
		
			if(CHECKBIT(temp, bit_to_check)){
 1a4:	c8 9b       	sbis	0x19, 0	; 25
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <ppm_sycn+0x42>
			
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
 1a8:	ac 01       	movw	r20, r24
 1aa:	41 60       	ori	r20, 0x01	; 1
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <ppm_sycn+0x46>
			
			}					
		else
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 1b2:	ac 01       	movw	r20, r24
 1b4:	fb cf       	rjmp	.-10     	; 0x1ac <ppm_sycn+0x3c>
				byte_placeholder = byte_placeholder|bit_to_shift;
			
			}
		while(i<8)
		{
			cnt1 = 0, cnt=0;
 1b6:	10 92 00 01 	sts	0x0100, r1
 1ba:	10 92 01 01 	sts	0x0101, r1
 1be:	10 92 02 01 	sts	0x0102, r1
 1c2:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 1c6:	80 91 00 01 	lds	r24, 0x0100
 1ca:	90 91 01 01 	lds	r25, 0x0101
 1ce:	a0 91 02 01 	lds	r26, 0x0102
 1d2:	b0 91 03 01 	lds	r27, 0x0103
			
			}
		while(i<8)
		{
			cnt1 = 0, cnt=0;
		while(cnt1==0)
 1d6:	89 2b       	or	r24, r25
 1d8:	b1 f3       	breq	.-20     	; 0x1c6 <ppm_sycn+0x56>
		{
			cnt1 = cnt;
		}
		i++;
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
			
			}
		while(i<8)
 1de:	28 30       	cpi	r18, 0x08	; 8
 1e0:	31 05       	cpc	r19, r1
 1e2:	49 f7       	brne	.-46     	; 0x1b6 <ppm_sycn+0x46>
			cnt1 = cnt;
		}
		i++;
		}
		i=0;
		if(byte_placeholder == 0xFF80)
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	40 38       	cpi	r20, 0x80	; 128
 1e8:	58 07       	cpc	r21, r24
 1ea:	39 f6       	brne	.-114    	; 0x17a <ppm_sycn+0xa>
		break;
	//	transmit(byte_placeholder);
	}
	return byte_placeholder;
}
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	9f ef       	ldi	r25, 0xFF	; 255
 1f0:	08 95       	ret

000001f2 <ppm_sycn_B>:
	bit_to_check 		= 0x01;
	byte_placeholder	= 0x00;
	byte_placeholder1	= 0xFF80;
	predata				= 0x00;
	temp = PINB;
	while(!(CHECKBIT(temp, bit_to_check))){temp = PINB; }//transmit(0x88);}
 1f2:	86 b3       	in	r24, 0x16	; 22
 1f4:	80 ff       	sbrs	r24, 0
 1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <ppm_sycn_B>
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	50 e0       	ldi	r21, 0x00	; 0
	while(1)
	{
	
	
		cnt1 = 0, cnt=0;
 1fc:	10 92 00 01 	sts	0x0100, r1
 200:	10 92 01 01 	sts	0x0101, r1
 204:	10 92 02 01 	sts	0x0102, r1
 208:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 20c:	80 91 00 01 	lds	r24, 0x0100
 210:	90 91 01 01 	lds	r25, 0x0101
 214:	a0 91 02 01 	lds	r26, 0x0102
 218:	b0 91 03 01 	lds	r27, 0x0103
	while(1)
	{
	
	
		cnt1 = 0, cnt=0;
		while(cnt1==0)
 21c:	89 2b       	or	r24, r25
 21e:	b1 f3       	breq	.-20     	; 0x20c <ppm_sycn_B+0x1a>
 220:	ca 01       	movw	r24, r20
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
			cnt1 = cnt;
		}
			temp = PINB;	
		
		
			if(CHECKBIT(temp, bit_to_check)){
 226:	b0 9b       	sbis	0x16, 0	; 22
 228:	05 c0       	rjmp	.+10     	; 0x234 <ppm_sycn_B+0x42>
			
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
 22a:	ac 01       	movw	r20, r24
 22c:	41 60       	ori	r20, 0x01	; 1
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <ppm_sycn_B+0x46>
			
			}					
		else
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 234:	ac 01       	movw	r20, r24
 236:	fb cf       	rjmp	.-10     	; 0x22e <ppm_sycn_B+0x3c>
				byte_placeholder = byte_placeholder|bit_to_shift;
			
			}
		while(i<8)
		{
			cnt1 = 0, cnt=0;
 238:	10 92 00 01 	sts	0x0100, r1
 23c:	10 92 01 01 	sts	0x0101, r1
 240:	10 92 02 01 	sts	0x0102, r1
 244:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 248:	80 91 00 01 	lds	r24, 0x0100
 24c:	90 91 01 01 	lds	r25, 0x0101
 250:	a0 91 02 01 	lds	r26, 0x0102
 254:	b0 91 03 01 	lds	r27, 0x0103
			
			}
		while(i<8)
		{
			cnt1 = 0, cnt=0;
		while(cnt1==0)
 258:	89 2b       	or	r24, r25
 25a:	b1 f3       	breq	.-20     	; 0x248 <ppm_sycn_B+0x56>
		{
			cnt1 = cnt;
		}
		i++;
 25c:	2f 5f       	subi	r18, 0xFF	; 255
 25e:	3f 4f       	sbci	r19, 0xFF	; 255
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
			
			}
		while(i<8)
 260:	28 30       	cpi	r18, 0x08	; 8
 262:	31 05       	cpc	r19, r1
 264:	49 f7       	brne	.-46     	; 0x238 <ppm_sycn_B+0x46>
			cnt1 = cnt;
		}
		i++;
		}
		i=0;
		if(byte_placeholder == 0xFF80)
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	40 38       	cpi	r20, 0x80	; 128
 26a:	58 07       	cpc	r21, r24
 26c:	39 f6       	brne	.-114    	; 0x1fc <ppm_sycn_B+0xa>
		break;
	//	transmit(byte_placeholder);
	}
	return byte_placeholder;
}
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	9f ef       	ldi	r25, 0xFF	; 255
 272:	08 95       	ret

00000274 <shiftByte>:

// --------------------------- Data Detection ----------------------------------

unsigned int shiftByte(){
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	70 e0       	ldi	r23, 0x00	; 0
	

	while(flag<8){
//		_delay_us(50);

	cnt1 = 0, cnt=0;
 27c:	10 92 00 01 	sts	0x0100, r1
 280:	10 92 01 01 	sts	0x0101, r1
 284:	10 92 02 01 	sts	0x0102, r1
 288:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 28c:	80 91 00 01 	lds	r24, 0x0100
 290:	90 91 01 01 	lds	r25, 0x0101
 294:	a0 91 02 01 	lds	r26, 0x0102
 298:	b0 91 03 01 	lds	r27, 0x0103

	while(flag<8){
//		_delay_us(50);

	cnt1 = 0, cnt=0;
		while(cnt1==0)
 29c:	89 2b       	or	r24, r25
 29e:	b1 f3       	breq	.-20     	; 0x28c <shiftByte+0x18>
 2a0:	ca 01       	movw	r24, r20
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
			cnt1 = cnt;
		}
	
		temp = PINA;
		
		if(CHECKBIT(temp, bit_to_check)){
 2a6:	c8 9b       	sbis	0x19, 0	; 25
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <shiftByte+0x3c>
			
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
 2aa:	ac 01       	movw	r20, r24
 2ac:	41 60       	ori	r20, 0x01	; 1
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <shiftByte+0x3e>
			
			}					
		else
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 2b0:	ac 01       	movw	r20, r24
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
				byte_placeholder = byte_placeholder|bit_to_shift;
			
			}
			for(i=0;i<8;i++)
		{
			cnt1 = 0, cnt=0;
 2b6:	10 92 00 01 	sts	0x0100, r1
 2ba:	10 92 01 01 	sts	0x0101, r1
 2be:	10 92 02 01 	sts	0x0102, r1
 2c2:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 2c6:	80 91 00 01 	lds	r24, 0x0100
 2ca:	90 91 01 01 	lds	r25, 0x0101
 2ce:	a0 91 02 01 	lds	r26, 0x0102
 2d2:	b0 91 03 01 	lds	r27, 0x0103
			
			}
			for(i=0;i<8;i++)
		{
			cnt1 = 0, cnt=0;
		while(cnt1==0)
 2d6:	89 2b       	or	r24, r25
 2d8:	b1 f3       	breq	.-20     	; 0x2c6 <shiftByte+0x52>
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
			
			}
			for(i=0;i<8;i++)
 2da:	2f 5f       	subi	r18, 0xFF	; 255
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	28 30       	cpi	r18, 0x08	; 8
 2e0:	31 05       	cpc	r19, r1
 2e2:	49 f7       	brne	.-46     	; 0x2b6 <shiftByte+0x42>
		{
			cnt1 = cnt;
		}
		}

	flag++;
 2e4:	6f 5f       	subi	r22, 0xFF	; 255
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
	byte_placeholder	= 0x00;
	byte_placeholder1	= 0xFF80;
	predata				= 0x00;
	

	while(flag<8){
 2e8:	68 30       	cpi	r22, 0x08	; 8
 2ea:	71 05       	cpc	r23, r1
 2ec:	39 f6       	brne	.-114    	; 0x27c <shiftByte+0x8>
		}

	flag++;
}
return byte_placeholder;
}
 2ee:	ca 01       	movw	r24, r20
 2f0:	08 95       	ret

000002f2 <shiftByte_B>:

unsigned int shiftByte_B(){
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
	

	while(flag<8){
//		_delay_us(50);

	cnt1 = 0, cnt=0;
 2fa:	10 92 00 01 	sts	0x0100, r1
 2fe:	10 92 01 01 	sts	0x0101, r1
 302:	10 92 02 01 	sts	0x0102, r1
 306:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 30a:	80 91 00 01 	lds	r24, 0x0100
 30e:	90 91 01 01 	lds	r25, 0x0101
 312:	a0 91 02 01 	lds	r26, 0x0102
 316:	b0 91 03 01 	lds	r27, 0x0103

	while(flag<8){
//		_delay_us(50);

	cnt1 = 0, cnt=0;
		while(cnt1==0)
 31a:	89 2b       	or	r24, r25
 31c:	b1 f3       	breq	.-20     	; 0x30a <shiftByte_B+0x18>
 31e:	ca 01       	movw	r24, r20
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
			cnt1 = cnt;
		}
	
		temp = PINB;
		
		if(CHECKBIT(temp, bit_to_check)){
 324:	b0 9b       	sbis	0x16, 0	; 22
 326:	03 c0       	rjmp	.+6      	; 0x32e <shiftByte_B+0x3c>
			
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
 328:	ac 01       	movw	r20, r24
 32a:	41 60       	ori	r20, 0x01	; 1
 32c:	01 c0       	rjmp	.+2      	; 0x330 <shiftByte_B+0x3e>
			
			}					
		else
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 32e:	ac 01       	movw	r20, r24
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
				byte_placeholder = byte_placeholder|bit_to_shift;
			
			}
			for(i=0;i<8;i++)
		{
			cnt1 = 0, cnt=0;
 334:	10 92 00 01 	sts	0x0100, r1
 338:	10 92 01 01 	sts	0x0101, r1
 33c:	10 92 02 01 	sts	0x0102, r1
 340:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 344:	80 91 00 01 	lds	r24, 0x0100
 348:	90 91 01 01 	lds	r25, 0x0101
 34c:	a0 91 02 01 	lds	r26, 0x0102
 350:	b0 91 03 01 	lds	r27, 0x0103
			
			}
			for(i=0;i<8;i++)
		{
			cnt1 = 0, cnt=0;
		while(cnt1==0)
 354:	89 2b       	or	r24, r25
 356:	b1 f3       	breq	.-20     	; 0x344 <shiftByte_B+0x52>
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
			
			}
			for(i=0;i<8;i++)
 358:	2f 5f       	subi	r18, 0xFF	; 255
 35a:	3f 4f       	sbci	r19, 0xFF	; 255
 35c:	28 30       	cpi	r18, 0x08	; 8
 35e:	31 05       	cpc	r19, r1
 360:	49 f7       	brne	.-46     	; 0x334 <shiftByte_B+0x42>
		{
			cnt1 = cnt;
		}
		}

	flag++;
 362:	6f 5f       	subi	r22, 0xFF	; 255
 364:	7f 4f       	sbci	r23, 0xFF	; 255
	byte_placeholder	= 0x00;
	byte_placeholder1	= 0xFF80;
	predata				= 0x00;
	

	while(flag<8){
 366:	68 30       	cpi	r22, 0x08	; 8
 368:	71 05       	cpc	r23, r1
 36a:	39 f6       	brne	.-114    	; 0x2fa <shiftByte_B+0x8>
		}

	flag++;
}
return byte_placeholder;
}
 36c:	ca 01       	movw	r24, r20
 36e:	08 95       	ret

00000370 <main>:


//Main Program----------------------------------------------------------------------------
int main(void){
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	64 97       	sbiw	r28, 0x14	; 20
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de bf       	out	0x3e, r29	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd bf       	out	0x3d, r28	; 61

	serial_init(); 
 38c:	0e 94 67 00 	call	0xce	; 0xce <serial_init>
	Timer1_init(); 
 390:	0e 94 81 00 	call	0x102	; 0x102 <Timer1_init>
	DDRA=0x00;
 394:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0x00;
 396:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF;
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	88 bb       	out	0x18, r24	; 24
	PORTA=0xFF;
 39c:	8b bb       	out	0x1b, r24	; 27
	TIMSK |= 0x04;
 39e:	87 b7       	in	r24, 0x37	; 55
 3a0:	84 60       	ori	r24, 0x04	; 4
 3a2:	87 bf       	out	0x37, r24	; 55
	SREG |= 0x80;
 3a4:	8f b7       	in	r24, 0x3f	; 63
 3a6:	80 68       	ori	r24, 0x80	; 128
 3a8:	8f bf       	out	0x3f, r24	; 63
		
	 ppm_sycn();
	 data[0] = shiftByte();
	 data[1] = shiftByte();
	 data[2] = shiftByte();
	 data[3] = shiftByte();
 3aa:	7e 01       	movw	r14, r28
 3ac:	08 94       	sec
 3ae:	e1 1c       	adc	r14, r1
 3b0:	f1 1c       	adc	r15, r1
	 data[4] = shiftByte_B();
	 data[5] = shiftByte_B();
	 data[6] = shiftByte_B();
	 data[7] = shiftByte_B();*/
	 
	 for(i=0;i<4;i++)
 3b2:	8e 01       	movw	r16, r28
 3b4:	07 5f       	subi	r16, 0xF7	; 247
 3b6:	1f 4f       	sbci	r17, 0xFF	; 255
	TIMSK |= 0x04;
	SREG |= 0x80;
	unsigned int c,d,j, data[10],cnt1=0,i;
	while(1){
		
	 ppm_sycn();
 3b8:	0e 94 b8 00 	call	0x170	; 0x170 <ppm_sycn>
	 data[0] = shiftByte();
 3bc:	0e 94 3a 01 	call	0x274	; 0x274 <shiftByte>
 3c0:	9a 83       	std	Y+2, r25	; 0x02
 3c2:	89 83       	std	Y+1, r24	; 0x01
	 data[1] = shiftByte();
 3c4:	0e 94 3a 01 	call	0x274	; 0x274 <shiftByte>
 3c8:	9c 83       	std	Y+4, r25	; 0x04
 3ca:	8b 83       	std	Y+3, r24	; 0x03
	 data[2] = shiftByte();
 3cc:	0e 94 3a 01 	call	0x274	; 0x274 <shiftByte>
 3d0:	9e 83       	std	Y+6, r25	; 0x06
 3d2:	8d 83       	std	Y+5, r24	; 0x05
	 data[3] = shiftByte();
 3d4:	0e 94 3a 01 	call	0x274	; 0x274 <shiftByte>
 3d8:	98 87       	std	Y+8, r25	; 0x08
 3da:	8f 83       	std	Y+7, r24	; 0x07
 3dc:	f7 01       	movw	r30, r14
	 data[6] = shiftByte_B();
	 data[7] = shiftByte_B();*/
	 
	 for(i=0;i<4;i++)
	 {
	 	transmit(data[i]);
 3de:	90 81       	ld	r25, Z
                                         //When set, these two bits turn on the serial buffers to allow for serial communications
}

void transmit(unsigned char data)
{
while(!(UCSR1A & (1<<UDRE1)));
 3e0:	80 91 9b 00 	lds	r24, 0x009B
 3e4:	85 ff       	sbrs	r24, 5
 3e6:	fc cf       	rjmp	.-8      	; 0x3e0 <main+0x70>
UDR1=data;
 3e8:	90 93 9c 00 	sts	0x009C, r25
 3ec:	32 96       	adiw	r30, 0x02	; 2
	 data[4] = shiftByte_B();
	 data[5] = shiftByte_B();
	 data[6] = shiftByte_B();
	 data[7] = shiftByte_B();*/
	 
	 for(i=0;i<4;i++)
 3ee:	e0 17       	cp	r30, r16
 3f0:	f1 07       	cpc	r31, r17
 3f2:	a9 f7       	brne	.-22     	; 0x3de <main+0x6e>
 3f4:	e1 cf       	rjmp	.-62     	; 0x3b8 <main+0x48>

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
