
Tx_temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000362  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ac  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000028f  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010f  00000000  00000000  000006bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000033c  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000144  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000005a  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ee       	ldi	r30, 0xEE	; 238
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  c6:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <serial_init>:
{
  unsigned int baudrate[15] ={416,207,103,68,51,34,25,16,12,8,3,3,1,0};
 


  UBRR1L = baudrate[2]; 
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = baudrate[2]>>8;      
  d4:	10 92 98 00 	sts	0x0098, r1
  
  UBRR0L = baudrate[2];
  d8:	89 b9       	out	0x09, r24	; 9
  UBRR0H = baudrate[2]>>8;               // 4:19200bps; 6:38400; 7:57600; 8:76800; 9;115200
  da:	10 92 90 00 	sts	0x0090, r1
  


  
  UCSR1C = (1 << UCSZ1) | (1 << UCSZ0);  // no parity ,  stop bit 1 , data 8
  de:	96 e0       	ldi	r25, 0x06	; 6
  e0:	90 93 9d 00 	sts	0x009D, r25
 UCSR1B = (1 << TXEN1) | (1 << RXEN1);
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	80 93 9a 00 	sts	0x009A, r24
  // UCSR1A = (1 << U2X0);                //double baudrate 
 UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);  //serial 8-bit format. no parity, stop bit 1, data 8
  ea:	90 93 95 00 	sts	0x0095, r25
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);    //enable tx rx located in control reg UCSR1B
  ee:	8a b9       	out	0x0a, r24	; 10
                                         //When set, these two bits turn on the serial buffers to allow for serial communications
}
  f0:	08 95       	ret

000000f2 <Timer1_init>:
{

	//unsigned int cycles;
	unsigned long cycles;
  	// Initializing Timer
	TCCR1A = 0;                 // clear control register A 
  f2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << WGM13); // set mode 8: phase and frequency correct pwm, stop the timer
  f4:	8e b5       	in	r24, 0x2e	; 46
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	8e bd       	out	0x2e, r24	; 46
 	
	unsigned char oldSREG = SREG;
  fa:	2f b7       	in	r18, 0x3f	; 63
	cli();
  fc:	f8 94       	cli

	//cycles = 20; // 2/(16000000/8)*10 = 10us, *20 = 20us (50KHz)
	cycles = 50;	// 2/(16000000/64)*125 = 1ms , *25 = 0.2ms
	ICR1 = cycles;
  fe:	82 e3       	ldi	r24, 0x32	; 50
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	97 bd       	out	0x27, r25	; 39
 104:	86 bd       	out	0x26, r24	; 38
	//sei();
	SREG = oldSREG;
 106:	2f bf       	out	0x3f, r18	; 63

	
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
 108:	8e b5       	in	r24, 0x2e	; 46
 10a:	88 7f       	andi	r24, 0xF8	; 248
 10c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11) ;	// prescale: clk / 8
 10e:	8e b5       	in	r24, 0x2e	; 46
 110:	82 60       	ori	r24, 0x02	; 2
 112:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64

	

}
 114:	08 95       	ret

00000116 <__vector_14>:

ISR(TIMER1_OVF_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
	cnt++;
 128:	80 91 00 01 	lds	r24, 0x0100
 12c:	90 91 01 01 	lds	r25, 0x0101
 130:	a0 91 02 01 	lds	r26, 0x0102
 134:	b0 91 03 01 	lds	r27, 0x0103
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	a1 1d       	adc	r26, r1
 13c:	b1 1d       	adc	r27, r1
 13e:	80 93 00 01 	sts	0x0100, r24
 142:	90 93 01 01 	sts	0x0101, r25
 146:	a0 93 02 01 	sts	0x0102, r26
 14a:	b0 93 03 01 	sts	0x0103, r27
}
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <transmit0>:


void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 160:	5d 9b       	sbis	0x0b, 5	; 11
 162:	fe cf       	rjmp	.-4      	; 0x160 <transmit0>
UDR0=data;
 164:	8c b9       	out	0x0c, r24	; 12

}
 166:	08 95       	ret

00000168 <Rxdata>:

unsigned int Rxdata (void)
{

	// Wait for empty transmit buffer 
	while ( !(UCSR0A & (1<<RXC0)) );
 168:	5f 9b       	sbis	0x0b, 7	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <Rxdata>

	// Receive data from buffer, return the data 
	return UDR0;	
 16c:	8c b1       	in	r24, 0x0c	; 12

}
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	08 95       	ret

00000172 <Rxdata1>:

unsigned int Rxdata1 (void)
{

	// Wait for empty transmit buffer 
	while ( !(UCSR1A & (1<<RXC1)) );
 172:	80 91 9b 00 	lds	r24, 0x009B
 176:	87 ff       	sbrs	r24, 7
 178:	fc cf       	rjmp	.-8      	; 0x172 <Rxdata1>

	// Receive data from buffer, return the data 
	return UDR1;	
 17a:	80 91 9c 00 	lds	r24, 0x009C

}
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret

00000182 <transmit1>:

void transmit1(unsigned char data)
{
 182:	98 2f       	mov	r25, r24
while(!(UCSR1A & (1<<UDRE1)));
 184:	80 91 9b 00 	lds	r24, 0x009B
 188:	85 ff       	sbrs	r24, 5
 18a:	fc cf       	rjmp	.-8      	; 0x184 <transmit1+0x2>
UDR1=data;
 18c:	90 93 9c 00 	sts	0x009C, r25

}
 190:	08 95       	ret

00000192 <send_ppm_new_C>:




unsigned int send_ppm_new_C (char data)
{
 192:	78 2f       	mov	r23, r24
 194:	60 e8       	ldi	r22, 0x80	; 128
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTC = 0x00;
		}
		else
		{
			PORTC = 0x07;
 19a:	e7 e0       	ldi	r30, 0x07	; 7
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0,i=0;

	while(flag<8)
	{
		if (!(CHECKBIT(data, bit_to_check)))
 19c:	86 2f       	mov	r24, r22
 19e:	87 23       	and	r24, r23
 1a0:	11 f4       	brne	.+4      	; 0x1a6 <send_ppm_new_C+0x14>
		{
			PORTC = 0x00;
 1a2:	15 ba       	out	0x15, r1	; 21
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <send_ppm_new_C+0x16>
		}
		else
		{
			PORTC = 0x07;
 1a6:	e5 bb       	out	0x15, r30	; 21
		}
		cnt1 = 0, cnt=0;
 1a8:	10 92 00 01 	sts	0x0100, r1
 1ac:	10 92 01 01 	sts	0x0101, r1
 1b0:	10 92 02 01 	sts	0x0102, r1
 1b4:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 1b8:	80 91 00 01 	lds	r24, 0x0100
 1bc:	90 91 01 01 	lds	r25, 0x0101
 1c0:	a0 91 02 01 	lds	r26, 0x0102
 1c4:	b0 91 03 01 	lds	r27, 0x0103
		else
		{
			PORTC = 0x07;
		}
		cnt1 = 0, cnt=0;
		while(cnt1==0)
 1c8:	89 2b       	or	r24, r25
 1ca:	b1 f3       	breq	.-20     	; 0x1b8 <send_ppm_new_C+0x26>
		{
			cnt1 = cnt;
		}
		PORTC = 0x00;
 1cc:	15 ba       	out	0x15, r1	; 21
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
		
		bit_to_check = bit_to_check >> 1;
		for(i=0;i<8;i++)
		{
			cnt1 = 0, cnt=0;
 1d2:	10 92 00 01 	sts	0x0100, r1
 1d6:	10 92 01 01 	sts	0x0101, r1
 1da:	10 92 02 01 	sts	0x0102, r1
 1de:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 1e2:	80 91 00 01 	lds	r24, 0x0100
 1e6:	90 91 01 01 	lds	r25, 0x0101
 1ea:	a0 91 02 01 	lds	r26, 0x0102
 1ee:	b0 91 03 01 	lds	r27, 0x0103
		
		bit_to_check = bit_to_check >> 1;
		for(i=0;i<8;i++)
		{
			cnt1 = 0, cnt=0;
		while(cnt1==0)
 1f2:	89 2b       	or	r24, r25
 1f4:	b1 f3       	breq	.-20     	; 0x1e2 <send_ppm_new_C+0x50>
			cnt1 = cnt;
		}
		PORTC = 0x00;
		
		bit_to_check = bit_to_check >> 1;
		for(i=0;i<8;i++)
 1f6:	2f 5f       	subi	r18, 0xFF	; 255
 1f8:	3f 4f       	sbci	r19, 0xFF	; 255
 1fa:	28 30       	cpi	r18, 0x08	; 8
 1fc:	31 05       	cpc	r19, r1
 1fe:	49 f7       	brne	.-46     	; 0x1d2 <send_ppm_new_C+0x40>
		while(cnt1==0)
		{
			cnt1 = cnt;
		}
		}
		flag++;
 200:	4f 5f       	subi	r20, 0xFF	; 255
 202:	5f 4f       	sbci	r21, 0xFF	; 255
unsigned int send_ppm_new_C (char data)
{
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0,i=0;

	while(flag<8)
 204:	48 30       	cpi	r20, 0x08	; 8
 206:	51 05       	cpc	r21, r1
 208:	11 f0       	breq	.+4      	; 0x20e <send_ppm_new_C+0x7c>
		{
			cnt1 = cnt;
		}
		PORTC = 0x00;
		
		bit_to_check = bit_to_check >> 1;
 20a:	66 95       	lsr	r22
 20c:	c7 cf       	rjmp	.-114    	; 0x19c <send_ppm_new_C+0xa>
		}
		}
		flag++;
	}

}
 20e:	08 95       	ret

00000210 <send_ppm_new_F>:


unsigned int send_ppm_new_F (char data)
{
 210:	78 2f       	mov	r23, r24
 212:	60 e8       	ldi	r22, 0x80	; 128
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTF = 0x00;
		}
		else
		{
			PORTF = 0x07;
 218:	e7 e0       	ldi	r30, 0x07	; 7
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0,i=0;

	while(flag<8)
	{
		if (!(CHECKBIT(data, bit_to_check)))
 21a:	86 2f       	mov	r24, r22
 21c:	87 23       	and	r24, r23
 21e:	19 f4       	brne	.+6      	; 0x226 <send_ppm_new_F+0x16>
		{
			PORTF = 0x00;
 220:	10 92 62 00 	sts	0x0062, r1
 224:	02 c0       	rjmp	.+4      	; 0x22a <send_ppm_new_F+0x1a>
		}
		else
		{
			PORTF = 0x07;
 226:	e0 93 62 00 	sts	0x0062, r30
		}
		cnt1 = 0, cnt=0;
 22a:	10 92 00 01 	sts	0x0100, r1
 22e:	10 92 01 01 	sts	0x0101, r1
 232:	10 92 02 01 	sts	0x0102, r1
 236:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 23a:	80 91 00 01 	lds	r24, 0x0100
 23e:	90 91 01 01 	lds	r25, 0x0101
 242:	a0 91 02 01 	lds	r26, 0x0102
 246:	b0 91 03 01 	lds	r27, 0x0103
		else
		{
			PORTF = 0x07;
		}
		cnt1 = 0, cnt=0;
		while(cnt1==0)
 24a:	89 2b       	or	r24, r25
 24c:	b1 f3       	breq	.-20     	; 0x23a <send_ppm_new_F+0x2a>
		{
			cnt1 = cnt;
		}
		PORTF = 0x00;
 24e:	10 92 62 00 	sts	0x0062, r1
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
		
		bit_to_check = bit_to_check >> 1;
		for(i=0;i<8;i++)
		{
			cnt1 = 0, cnt=0;
 256:	10 92 00 01 	sts	0x0100, r1
 25a:	10 92 01 01 	sts	0x0101, r1
 25e:	10 92 02 01 	sts	0x0102, r1
 262:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 266:	80 91 00 01 	lds	r24, 0x0100
 26a:	90 91 01 01 	lds	r25, 0x0101
 26e:	a0 91 02 01 	lds	r26, 0x0102
 272:	b0 91 03 01 	lds	r27, 0x0103
		
		bit_to_check = bit_to_check >> 1;
		for(i=0;i<8;i++)
		{
			cnt1 = 0, cnt=0;
		while(cnt1==0)
 276:	89 2b       	or	r24, r25
 278:	b1 f3       	breq	.-20     	; 0x266 <send_ppm_new_F+0x56>
			cnt1 = cnt;
		}
		PORTF = 0x00;
		
		bit_to_check = bit_to_check >> 1;
		for(i=0;i<8;i++)
 27a:	2f 5f       	subi	r18, 0xFF	; 255
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	28 30       	cpi	r18, 0x08	; 8
 280:	31 05       	cpc	r19, r1
 282:	49 f7       	brne	.-46     	; 0x256 <send_ppm_new_F+0x46>
		while(cnt1==0)
		{
			cnt1 = cnt;
		}
		}
		flag++;
 284:	4f 5f       	subi	r20, 0xFF	; 255
 286:	5f 4f       	sbci	r21, 0xFF	; 255
unsigned int send_ppm_new_F (char data)
{
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0,i=0;

	while(flag<8)
 288:	48 30       	cpi	r20, 0x08	; 8
 28a:	51 05       	cpc	r21, r1
 28c:	11 f0       	breq	.+4      	; 0x292 <send_ppm_new_F+0x82>
		{
			cnt1 = cnt;
		}
		PORTF = 0x00;
		
		bit_to_check = bit_to_check >> 1;
 28e:	66 95       	lsr	r22
 290:	c4 cf       	rjmp	.-120    	; 0x21a <send_ppm_new_F+0xa>
		}
		}
		flag++;
	}

}
 292:	08 95       	ret

00000294 <main>:




int main(void)
{   
 294:	1f 93       	push	r17
	unsigned int ctr;
	unsigned char Rd[32],Rd1[32];
	serial_init();
 296:	0e 94 67 00 	call	0xce	; 0xce <serial_init>
	Timer1_init();
 29a:	0e 94 79 00 	call	0xf2	; 0xf2 <Timer1_init>
	DDRA=0xFF;
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	8a bb       	out	0x1a, r24	; 26
	DDRD=0xFF;
 2a2:	81 bb       	out	0x11, r24	; 17
	DDRF = 0xFF;
 2a4:	80 93 61 00 	sts	0x0061, r24
	DDRC = 0xFF;
 2a8:	84 bb       	out	0x14, r24	; 20
	TIMSK |= 0x04;
 2aa:	87 b7       	in	r24, 0x37	; 55
 2ac:	84 60       	ori	r24, 0x04	; 4
 2ae:	87 bf       	out	0x37, r24	; 55
	SREG |= 0x80;
 2b0:	8f b7       	in	r24, 0x3f	; 63
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	8f bf       	out	0x3f, r24	; 63
		send_ppm_new_F(0x89);
		send_ppm_new_F(0xF2);
		send_ppm_new_F(0x00);*/


		PORTA ^= 0x01;
 2b6:	11 e0       	ldi	r17, 0x01	; 1
//	PORTA = 0x01;
    while(1)
    {
	
		//Transfer using port C
		send_ppm_new_C(0xFF);
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	0e 94 c9 00 	call	0x192	; 0x192 <send_ppm_new_C>
		send_ppm_new_C(0x80);
 2be:	80 e8       	ldi	r24, 0x80	; 128
 2c0:	0e 94 c9 00 	call	0x192	; 0x192 <send_ppm_new_C>
		send_ppm_new_C(0xAA);
 2c4:	8a ea       	ldi	r24, 0xAA	; 170
 2c6:	0e 94 c9 00 	call	0x192	; 0x192 <send_ppm_new_C>
		send_ppm_new_C(0x20);
 2ca:	80 e2       	ldi	r24, 0x20	; 32
 2cc:	0e 94 c9 00 	call	0x192	; 0x192 <send_ppm_new_C>
		send_ppm_new_C(0x29);
 2d0:	89 e2       	ldi	r24, 0x29	; 41
 2d2:	0e 94 c9 00 	call	0x192	; 0x192 <send_ppm_new_C>
		send_ppm_new_C(0xE2);
 2d6:	82 ee       	ldi	r24, 0xE2	; 226
 2d8:	0e 94 c9 00 	call	0x192	; 0x192 <send_ppm_new_C>
		send_ppm_new_C(0x00);
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 c9 00 	call	0x192	; 0x192 <send_ppm_new_C>
		send_ppm_new_F(0x89);
		send_ppm_new_F(0xF2);
		send_ppm_new_F(0x00);*/


		PORTA ^= 0x01;
 2e2:	8b b3       	in	r24, 0x1b	; 27
 2e4:	81 27       	eor	r24, r17
 2e6:	8b bb       	out	0x1b, r24	; 27
 2e8:	e7 cf       	rjmp	.-50     	; 0x2b8 <main+0x24>

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
