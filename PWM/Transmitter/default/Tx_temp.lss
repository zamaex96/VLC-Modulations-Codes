
Tx_temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000024  00800100  00800100  000007f0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000bf  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000388  00000000  00000000  000008cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c3  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000071a  00000000  00000000  00000e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014f  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c2  00000000  00000000  00001743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 94 03 	call	0x728	; 0x728 <main>
  c6:	0c 94 bc 03 	jmp	0x778	; 0x778 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <serial_init>:
//-----------------------------------serial----------------------------------------
void serial_init(void) 
{
  unsigned int baudrate[15] ={416,207,103,68,51,34,25,16,12,8,3,3,1,0}; 

  UBRR1L = baudrate[9];
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = baudrate[9]>>8;      
  d4:	10 92 98 00 	sts	0x0098, r1
  
  UBRR0L = baudrate[2];
  d8:	87 e6       	ldi	r24, 0x67	; 103
  da:	89 b9       	out	0x09, r24	; 9
  UBRR0H = baudrate[2]>>8;         
  dc:	10 92 90 00 	sts	0x0090, r1
   
  UCSR1C = (1 << UCSZ1) | (1 << UCSZ0);  // no parity ,  stop bit 1 , data 8
  e0:	96 e0       	ldi	r25, 0x06	; 6
  e2:	90 93 9d 00 	sts	0x009D, r25
  UCSR1B = (1 << TXEN) | (1 << RXEN);
  e6:	88 e1       	ldi	r24, 0x18	; 24
  e8:	80 93 9a 00 	sts	0x009A, r24
  //double baudrate 
  UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);  //serial 8-bit format. no parity, stop bit 1, data 8
  ec:	90 93 95 00 	sts	0x0095, r25
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);    //enable tx rx located in control reg UCSR1B
  f0:	8a b9       	out	0x0a, r24	; 10
                                         //When set, these two bits turn on the serial buffers to allow for serial communications
}
  f2:	08 95       	ret

000000f4 <Timer1_init>:
{

	//unsigned int cycles;
	unsigned long cycles;
  	// Initializing Timer
	TCCR1A = 0;                 // clear control register A 
  f4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << WGM13); // set mode 8: phase and frequency correct pwm, stop the timer
  f6:	8e b5       	in	r24, 0x2e	; 46
  f8:	80 61       	ori	r24, 0x10	; 16
  fa:	8e bd       	out	0x2e, r24	; 46
 	
	unsigned char oldSREG = SREG;
  fc:	2f b7       	in	r18, 0x3f	; 63
	cli();
  fe:	f8 94       	cli

	//cycles = 20; // 2/(16000000/8)*10 = 10us, *20 = 20us (50KHz)
	cycles = 50;	// 2/(16000000/64)*125 = 1ms , *25 = 0.2ms
	ICR1 = cycles;
 100:	82 e3       	ldi	r24, 0x32	; 50
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	97 bd       	out	0x27, r25	; 39
 106:	86 bd       	out	0x26, r24	; 38
	//sei();
	SREG = oldSREG;
 108:	2f bf       	out	0x3f, r18	; 63

	
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
 10a:	8e b5       	in	r24, 0x2e	; 46
 10c:	88 7f       	andi	r24, 0xF8	; 248
 10e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11);	// prescale: clk / 8
 110:	8e b5       	in	r24, 0x2e	; 46
 112:	82 60       	ori	r24, 0x02	; 2
 114:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64

	

}
 116:	08 95       	ret

00000118 <__vector_14>:

ISR(TIMER1_OVF_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
	cnt++;
 12a:	80 91 00 01 	lds	r24, 0x0100
 12e:	90 91 01 01 	lds	r25, 0x0101
 132:	a0 91 02 01 	lds	r26, 0x0102
 136:	b0 91 03 01 	lds	r27, 0x0103
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	a1 1d       	adc	r26, r1
 13e:	b1 1d       	adc	r27, r1
 140:	80 93 00 01 	sts	0x0100, r24
 144:	90 93 01 01 	sts	0x0101, r25
 148:	a0 93 02 01 	sts	0x0102, r26
 14c:	b0 93 03 01 	sts	0x0103, r27
}
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <transmit1>:



void transmit1(unsigned char data)
{
 162:	98 2f       	mov	r25, r24
while(!(UCSR1A & (1<<UDRE1)));
 164:	80 91 9b 00 	lds	r24, 0x009B
 168:	85 ff       	sbrs	r24, 5
 16a:	fc cf       	rjmp	.-8      	; 0x164 <transmit1+0x2>
UDR1=data;
 16c:	90 93 9c 00 	sts	0x009C, r25

}
 170:	08 95       	ret

00000172 <transmit0>:

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 172:	5d 9b       	sbis	0x0b, 5	; 11
 174:	fe cf       	rjmp	.-4      	; 0x172 <transmit0>
UDR0=data;
 176:	8c b9       	out	0x0c, r24	; 12

}
 178:	08 95       	ret

0000017a <Rxdata>:

unsigned int Rxdata (void)
{

	// Wait for empty transmit buffer 
	while ( !(UCSR0A & (1<<RXC0)) );
 17a:	5f 9b       	sbis	0x0b, 7	; 11
 17c:	fe cf       	rjmp	.-4      	; 0x17a <Rxdata>

	// Receive data from buffer, return the data 
	return UDR0;	
 17e:	8c b1       	in	r24, 0x0c	; 12

}
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	08 95       	ret

00000184 <pwm_test>:

// Send Data using pulse wide modulation
// 00 is one time, 01 is two times, 10 is three times and 11 is four times

unsigned int pwm_test(char data)
{
 184:	58 2f       	mov	r21, r24
 186:	90 e8       	ldi	r25, 0x80	; 128
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
					cnt1 = cnt;
				}
			}
			else
			{
				PORTA = 0x07;			
 18c:	67 e0       	ldi	r22, 0x07	; 7
{
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0;
	while(flag<4)
	{
		if ((CHECKBIT(data, bit_to_check)))
 18e:	89 2f       	mov	r24, r25
 190:	85 23       	and	r24, r21
 192:	49 2f       	mov	r20, r25
 194:	46 95       	lsr	r20
 196:	88 23       	and	r24, r24
 198:	09 f4       	brne	.+2      	; 0x19c <pwm_test+0x18>
 19a:	9b c0       	rjmp	.+310    	; 0x2d2 <pwm_test+0x14e>
		{
			PORTA = 0x00;
 19c:	1b ba       	out	0x1b, r1	; 27
			bit_to_check = bit_to_check >> 1;
			if((CHECKBIT(data, bit_to_check)))
 19e:	84 2f       	mov	r24, r20
 1a0:	85 23       	and	r24, r21
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <pwm_test+0x22>
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <pwm_test+0xb8>
			{
				PORTA = 0x07;
 1a6:	6b bb       	out	0x1b, r22	; 27
				cnt1 = 0, cnt=0;
 1a8:	10 92 00 01 	sts	0x0100, r1
 1ac:	10 92 01 01 	sts	0x0101, r1
 1b0:	10 92 02 01 	sts	0x0102, r1
 1b4:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 1b8:	80 91 00 01 	lds	r24, 0x0100
 1bc:	90 91 01 01 	lds	r25, 0x0101
 1c0:	a0 91 02 01 	lds	r26, 0x0102
 1c4:	b0 91 03 01 	lds	r27, 0x0103
			bit_to_check = bit_to_check >> 1;
			if((CHECKBIT(data, bit_to_check)))
			{
				PORTA = 0x07;
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 1c8:	89 2b       	or	r24, r25
 1ca:	b1 f3       	breq	.-20     	; 0x1b8 <pwm_test+0x34>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 1cc:	10 92 00 01 	sts	0x0100, r1
 1d0:	10 92 01 01 	sts	0x0101, r1
 1d4:	10 92 02 01 	sts	0x0102, r1
 1d8:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 1dc:	80 91 00 01 	lds	r24, 0x0100
 1e0:	90 91 01 01 	lds	r25, 0x0101
 1e4:	a0 91 02 01 	lds	r26, 0x0102
 1e8:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 1ec:	89 2b       	or	r24, r25
 1ee:	b1 f3       	breq	.-20     	; 0x1dc <pwm_test+0x58>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 1f0:	10 92 00 01 	sts	0x0100, r1
 1f4:	10 92 01 01 	sts	0x0101, r1
 1f8:	10 92 02 01 	sts	0x0102, r1
 1fc:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 200:	80 91 00 01 	lds	r24, 0x0100
 204:	90 91 01 01 	lds	r25, 0x0101
 208:	a0 91 02 01 	lds	r26, 0x0102
 20c:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 210:	89 2b       	or	r24, r25
 212:	b1 f3       	breq	.-20     	; 0x200 <pwm_test+0x7c>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 214:	10 92 00 01 	sts	0x0100, r1
 218:	10 92 01 01 	sts	0x0101, r1
 21c:	10 92 02 01 	sts	0x0102, r1
 220:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 224:	80 91 00 01 	lds	r24, 0x0100
 228:	90 91 01 01 	lds	r25, 0x0101
 22c:	a0 91 02 01 	lds	r26, 0x0102
 230:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 234:	89 2b       	or	r24, r25
 236:	b1 f3       	breq	.-20     	; 0x224 <pwm_test+0xa0>
				{
					cnt1 = cnt;
				}
				PORTA = 0x00;
 238:	1b ba       	out	0x1b, r1	; 27
 23a:	e4 c0       	rjmp	.+456    	; 0x404 <pwm_test+0x280>
			}
			else
			{
				PORTA = 0x07;
 23c:	6b bb       	out	0x1b, r22	; 27
				cnt1 = 0, cnt=0;
 23e:	10 92 00 01 	sts	0x0100, r1
 242:	10 92 01 01 	sts	0x0101, r1
 246:	10 92 02 01 	sts	0x0102, r1
 24a:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 24e:	80 91 00 01 	lds	r24, 0x0100
 252:	90 91 01 01 	lds	r25, 0x0101
 256:	a0 91 02 01 	lds	r26, 0x0102
 25a:	b0 91 03 01 	lds	r27, 0x0103
			}
			else
			{
				PORTA = 0x07;
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 25e:	89 2b       	or	r24, r25
 260:	b1 f3       	breq	.-20     	; 0x24e <pwm_test+0xca>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 262:	10 92 00 01 	sts	0x0100, r1
 266:	10 92 01 01 	sts	0x0101, r1
 26a:	10 92 02 01 	sts	0x0102, r1
 26e:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 272:	80 91 00 01 	lds	r24, 0x0100
 276:	90 91 01 01 	lds	r25, 0x0101
 27a:	a0 91 02 01 	lds	r26, 0x0102
 27e:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 282:	89 2b       	or	r24, r25
 284:	b1 f3       	breq	.-20     	; 0x272 <pwm_test+0xee>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 286:	10 92 00 01 	sts	0x0100, r1
 28a:	10 92 01 01 	sts	0x0101, r1
 28e:	10 92 02 01 	sts	0x0102, r1
 292:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 296:	80 91 00 01 	lds	r24, 0x0100
 29a:	90 91 01 01 	lds	r25, 0x0101
 29e:	a0 91 02 01 	lds	r26, 0x0102
 2a2:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 2a6:	89 2b       	or	r24, r25
 2a8:	b1 f3       	breq	.-20     	; 0x296 <pwm_test+0x112>
				{
					cnt1 = cnt;
				}
				PORTA = 0x00;
 2aa:	1b ba       	out	0x1b, r1	; 27
				cnt1 = 0, cnt=0;
 2ac:	10 92 00 01 	sts	0x0100, r1
 2b0:	10 92 01 01 	sts	0x0101, r1
 2b4:	10 92 02 01 	sts	0x0102, r1
 2b8:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 2bc:	80 91 00 01 	lds	r24, 0x0100
 2c0:	90 91 01 01 	lds	r25, 0x0101
 2c4:	a0 91 02 01 	lds	r26, 0x0102
 2c8:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTA = 0x00;
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 2cc:	89 2b       	or	r24, r25
 2ce:	b1 f3       	breq	.-20     	; 0x2bc <pwm_test+0x138>
 2d0:	99 c0       	rjmp	.+306    	; 0x404 <pwm_test+0x280>
		}

		else
		{
			bit_to_check = bit_to_check >> 1;
			if((CHECKBIT(data, bit_to_check)))
 2d2:	84 2f       	mov	r24, r20
 2d4:	85 23       	and	r24, r21
 2d6:	09 f4       	brne	.+2      	; 0x2da <pwm_test+0x156>
 2d8:	4b c0       	rjmp	.+150    	; 0x370 <pwm_test+0x1ec>
			{
				PORTA = 0x07;	
 2da:	6b bb       	out	0x1b, r22	; 27
				cnt1 = 0, cnt=0;
 2dc:	10 92 00 01 	sts	0x0100, r1
 2e0:	10 92 01 01 	sts	0x0101, r1
 2e4:	10 92 02 01 	sts	0x0102, r1
 2e8:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 2ec:	80 91 00 01 	lds	r24, 0x0100
 2f0:	90 91 01 01 	lds	r25, 0x0101
 2f4:	a0 91 02 01 	lds	r26, 0x0102
 2f8:	b0 91 03 01 	lds	r27, 0x0103
			bit_to_check = bit_to_check >> 1;
			if((CHECKBIT(data, bit_to_check)))
			{
				PORTA = 0x07;	
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 2fc:	89 2b       	or	r24, r25
 2fe:	b1 f3       	breq	.-20     	; 0x2ec <pwm_test+0x168>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 300:	10 92 00 01 	sts	0x0100, r1
 304:	10 92 01 01 	sts	0x0101, r1
 308:	10 92 02 01 	sts	0x0102, r1
 30c:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 310:	80 91 00 01 	lds	r24, 0x0100
 314:	90 91 01 01 	lds	r25, 0x0101
 318:	a0 91 02 01 	lds	r26, 0x0102
 31c:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 320:	89 2b       	or	r24, r25
 322:	b1 f3       	breq	.-20     	; 0x310 <pwm_test+0x18c>
				{
					cnt1 = cnt;
				}
				PORTA = 0x00;
 324:	1b ba       	out	0x1b, r1	; 27
				cnt1 = 0, cnt=0;
 326:	10 92 00 01 	sts	0x0100, r1
 32a:	10 92 01 01 	sts	0x0101, r1
 32e:	10 92 02 01 	sts	0x0102, r1
 332:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 336:	80 91 00 01 	lds	r24, 0x0100
 33a:	90 91 01 01 	lds	r25, 0x0101
 33e:	a0 91 02 01 	lds	r26, 0x0102
 342:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTA = 0x00;
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 346:	89 2b       	or	r24, r25
 348:	b1 f3       	breq	.-20     	; 0x336 <pwm_test+0x1b2>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 34a:	10 92 00 01 	sts	0x0100, r1
 34e:	10 92 01 01 	sts	0x0101, r1
 352:	10 92 02 01 	sts	0x0102, r1
 356:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 35a:	80 91 00 01 	lds	r24, 0x0100
 35e:	90 91 01 01 	lds	r25, 0x0101
 362:	a0 91 02 01 	lds	r26, 0x0102
 366:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 36a:	89 2b       	or	r24, r25
 36c:	b1 f3       	breq	.-20     	; 0x35a <pwm_test+0x1d6>
 36e:	4a c0       	rjmp	.+148    	; 0x404 <pwm_test+0x280>
					cnt1 = cnt;
				}
			}
			else
			{
				PORTA = 0x07;			
 370:	6b bb       	out	0x1b, r22	; 27
				cnt1 = 0, cnt=0;
 372:	10 92 00 01 	sts	0x0100, r1
 376:	10 92 01 01 	sts	0x0101, r1
 37a:	10 92 02 01 	sts	0x0102, r1
 37e:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 382:	80 91 00 01 	lds	r24, 0x0100
 386:	90 91 01 01 	lds	r25, 0x0101
 38a:	a0 91 02 01 	lds	r26, 0x0102
 38e:	b0 91 03 01 	lds	r27, 0x0103
			}
			else
			{
				PORTA = 0x07;			
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 392:	89 2b       	or	r24, r25
 394:	b1 f3       	breq	.-20     	; 0x382 <pwm_test+0x1fe>
				{
					cnt1 = cnt;
				}
				PORTA = 0x00;
 396:	1b ba       	out	0x1b, r1	; 27
				cnt1 = 0, cnt=0;
 398:	10 92 00 01 	sts	0x0100, r1
 39c:	10 92 01 01 	sts	0x0101, r1
 3a0:	10 92 02 01 	sts	0x0102, r1
 3a4:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 3a8:	80 91 00 01 	lds	r24, 0x0100
 3ac:	90 91 01 01 	lds	r25, 0x0101
 3b0:	a0 91 02 01 	lds	r26, 0x0102
 3b4:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTA = 0x00;
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 3b8:	89 2b       	or	r24, r25
 3ba:	b1 f3       	breq	.-20     	; 0x3a8 <pwm_test+0x224>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 3bc:	10 92 00 01 	sts	0x0100, r1
 3c0:	10 92 01 01 	sts	0x0101, r1
 3c4:	10 92 02 01 	sts	0x0102, r1
 3c8:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 3cc:	80 91 00 01 	lds	r24, 0x0100
 3d0:	90 91 01 01 	lds	r25, 0x0101
 3d4:	a0 91 02 01 	lds	r26, 0x0102
 3d8:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 3dc:	89 2b       	or	r24, r25
 3de:	b1 f3       	breq	.-20     	; 0x3cc <pwm_test+0x248>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 3e0:	10 92 00 01 	sts	0x0100, r1
 3e4:	10 92 01 01 	sts	0x0101, r1
 3e8:	10 92 02 01 	sts	0x0102, r1
 3ec:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 3f0:	80 91 00 01 	lds	r24, 0x0100
 3f4:	90 91 01 01 	lds	r25, 0x0101
 3f8:	a0 91 02 01 	lds	r26, 0x0102
 3fc:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 400:	89 2b       	or	r24, r25
 402:	b1 f3       	breq	.-20     	; 0x3f0 <pwm_test+0x26c>
					cnt1 = cnt;
				}
			}
		}
		bit_to_check = bit_to_check >> 1;
		flag++;
 404:	2f 5f       	subi	r18, 0xFF	; 255
 406:	3f 4f       	sbci	r19, 0xFF	; 255

unsigned int pwm_test(char data)
{
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0;
	while(flag<4)
 408:	24 30       	cpi	r18, 0x04	; 4
 40a:	31 05       	cpc	r19, r1
 40c:	19 f0       	breq	.+6      	; 0x414 <pwm_test+0x290>
				{
					cnt1 = cnt;
				}
			}
		}
		bit_to_check = bit_to_check >> 1;
 40e:	94 2f       	mov	r25, r20
 410:	96 95       	lsr	r25
 412:	bd ce       	rjmp	.-646    	; 0x18e <pwm_test+0xa>
		flag++;
	}
}
 414:	08 95       	ret

00000416 <pwm_test_B>:


unsigned int pwm_test_B(char data)
{
 416:	58 2f       	mov	r21, r24
 418:	90 e8       	ldi	r25, 0x80	; 128
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
					cnt1 = cnt;
				}
			}
			else
			{
				PORTB = 0x07;			
 41e:	67 e0       	ldi	r22, 0x07	; 7
{
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0;
	while(flag<4)
	{
		if ((CHECKBIT(data, bit_to_check)))
 420:	89 2f       	mov	r24, r25
 422:	85 23       	and	r24, r21
 424:	49 2f       	mov	r20, r25
 426:	46 95       	lsr	r20
 428:	88 23       	and	r24, r24
 42a:	09 f4       	brne	.+2      	; 0x42e <pwm_test_B+0x18>
 42c:	9b c0       	rjmp	.+310    	; 0x564 <pwm_test_B+0x14e>
		{
			PORTB = 0x00;
 42e:	18 ba       	out	0x18, r1	; 24
			bit_to_check = bit_to_check >> 1;
			if((CHECKBIT(data, bit_to_check)))
 430:	84 2f       	mov	r24, r20
 432:	85 23       	and	r24, r21
 434:	09 f4       	brne	.+2      	; 0x438 <pwm_test_B+0x22>
 436:	4b c0       	rjmp	.+150    	; 0x4ce <pwm_test_B+0xb8>
			{
				PORTB = 0x07;
 438:	68 bb       	out	0x18, r22	; 24
				cnt1 = 0, cnt=0;
 43a:	10 92 00 01 	sts	0x0100, r1
 43e:	10 92 01 01 	sts	0x0101, r1
 442:	10 92 02 01 	sts	0x0102, r1
 446:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 44a:	80 91 00 01 	lds	r24, 0x0100
 44e:	90 91 01 01 	lds	r25, 0x0101
 452:	a0 91 02 01 	lds	r26, 0x0102
 456:	b0 91 03 01 	lds	r27, 0x0103
			bit_to_check = bit_to_check >> 1;
			if((CHECKBIT(data, bit_to_check)))
			{
				PORTB = 0x07;
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 45a:	89 2b       	or	r24, r25
 45c:	b1 f3       	breq	.-20     	; 0x44a <pwm_test_B+0x34>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 45e:	10 92 00 01 	sts	0x0100, r1
 462:	10 92 01 01 	sts	0x0101, r1
 466:	10 92 02 01 	sts	0x0102, r1
 46a:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 46e:	80 91 00 01 	lds	r24, 0x0100
 472:	90 91 01 01 	lds	r25, 0x0101
 476:	a0 91 02 01 	lds	r26, 0x0102
 47a:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 47e:	89 2b       	or	r24, r25
 480:	b1 f3       	breq	.-20     	; 0x46e <pwm_test_B+0x58>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 482:	10 92 00 01 	sts	0x0100, r1
 486:	10 92 01 01 	sts	0x0101, r1
 48a:	10 92 02 01 	sts	0x0102, r1
 48e:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 492:	80 91 00 01 	lds	r24, 0x0100
 496:	90 91 01 01 	lds	r25, 0x0101
 49a:	a0 91 02 01 	lds	r26, 0x0102
 49e:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 4a2:	89 2b       	or	r24, r25
 4a4:	b1 f3       	breq	.-20     	; 0x492 <pwm_test_B+0x7c>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 4a6:	10 92 00 01 	sts	0x0100, r1
 4aa:	10 92 01 01 	sts	0x0101, r1
 4ae:	10 92 02 01 	sts	0x0102, r1
 4b2:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 4b6:	80 91 00 01 	lds	r24, 0x0100
 4ba:	90 91 01 01 	lds	r25, 0x0101
 4be:	a0 91 02 01 	lds	r26, 0x0102
 4c2:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 4c6:	89 2b       	or	r24, r25
 4c8:	b1 f3       	breq	.-20     	; 0x4b6 <pwm_test_B+0xa0>
				{
					cnt1 = cnt;
				}
				PORTB = 0x00;
 4ca:	18 ba       	out	0x18, r1	; 24
 4cc:	e4 c0       	rjmp	.+456    	; 0x696 <pwm_test_B+0x280>
			}
			else
			{
				PORTB = 0x07;
 4ce:	68 bb       	out	0x18, r22	; 24
				cnt1 = 0, cnt=0;
 4d0:	10 92 00 01 	sts	0x0100, r1
 4d4:	10 92 01 01 	sts	0x0101, r1
 4d8:	10 92 02 01 	sts	0x0102, r1
 4dc:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 4e0:	80 91 00 01 	lds	r24, 0x0100
 4e4:	90 91 01 01 	lds	r25, 0x0101
 4e8:	a0 91 02 01 	lds	r26, 0x0102
 4ec:	b0 91 03 01 	lds	r27, 0x0103
			}
			else
			{
				PORTB = 0x07;
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 4f0:	89 2b       	or	r24, r25
 4f2:	b1 f3       	breq	.-20     	; 0x4e0 <pwm_test_B+0xca>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 4f4:	10 92 00 01 	sts	0x0100, r1
 4f8:	10 92 01 01 	sts	0x0101, r1
 4fc:	10 92 02 01 	sts	0x0102, r1
 500:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 504:	80 91 00 01 	lds	r24, 0x0100
 508:	90 91 01 01 	lds	r25, 0x0101
 50c:	a0 91 02 01 	lds	r26, 0x0102
 510:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 514:	89 2b       	or	r24, r25
 516:	b1 f3       	breq	.-20     	; 0x504 <pwm_test_B+0xee>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 518:	10 92 00 01 	sts	0x0100, r1
 51c:	10 92 01 01 	sts	0x0101, r1
 520:	10 92 02 01 	sts	0x0102, r1
 524:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 528:	80 91 00 01 	lds	r24, 0x0100
 52c:	90 91 01 01 	lds	r25, 0x0101
 530:	a0 91 02 01 	lds	r26, 0x0102
 534:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 538:	89 2b       	or	r24, r25
 53a:	b1 f3       	breq	.-20     	; 0x528 <pwm_test_B+0x112>
				{
					cnt1 = cnt;
				}
				PORTB = 0x00;
 53c:	18 ba       	out	0x18, r1	; 24
				cnt1 = 0, cnt=0;
 53e:	10 92 00 01 	sts	0x0100, r1
 542:	10 92 01 01 	sts	0x0101, r1
 546:	10 92 02 01 	sts	0x0102, r1
 54a:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 54e:	80 91 00 01 	lds	r24, 0x0100
 552:	90 91 01 01 	lds	r25, 0x0101
 556:	a0 91 02 01 	lds	r26, 0x0102
 55a:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTB = 0x00;
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 55e:	89 2b       	or	r24, r25
 560:	b1 f3       	breq	.-20     	; 0x54e <pwm_test_B+0x138>
 562:	99 c0       	rjmp	.+306    	; 0x696 <pwm_test_B+0x280>
		}

		else
		{
			bit_to_check = bit_to_check >> 1;
			if((CHECKBIT(data, bit_to_check)))
 564:	84 2f       	mov	r24, r20
 566:	85 23       	and	r24, r21
 568:	09 f4       	brne	.+2      	; 0x56c <pwm_test_B+0x156>
 56a:	4b c0       	rjmp	.+150    	; 0x602 <pwm_test_B+0x1ec>
			{
				PORTB = 0x07;	
 56c:	68 bb       	out	0x18, r22	; 24
				cnt1 = 0, cnt=0;
 56e:	10 92 00 01 	sts	0x0100, r1
 572:	10 92 01 01 	sts	0x0101, r1
 576:	10 92 02 01 	sts	0x0102, r1
 57a:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 57e:	80 91 00 01 	lds	r24, 0x0100
 582:	90 91 01 01 	lds	r25, 0x0101
 586:	a0 91 02 01 	lds	r26, 0x0102
 58a:	b0 91 03 01 	lds	r27, 0x0103
			bit_to_check = bit_to_check >> 1;
			if((CHECKBIT(data, bit_to_check)))
			{
				PORTB = 0x07;	
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 58e:	89 2b       	or	r24, r25
 590:	b1 f3       	breq	.-20     	; 0x57e <pwm_test_B+0x168>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 592:	10 92 00 01 	sts	0x0100, r1
 596:	10 92 01 01 	sts	0x0101, r1
 59a:	10 92 02 01 	sts	0x0102, r1
 59e:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 5a2:	80 91 00 01 	lds	r24, 0x0100
 5a6:	90 91 01 01 	lds	r25, 0x0101
 5aa:	a0 91 02 01 	lds	r26, 0x0102
 5ae:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 5b2:	89 2b       	or	r24, r25
 5b4:	b1 f3       	breq	.-20     	; 0x5a2 <pwm_test_B+0x18c>
				{
					cnt1 = cnt;
				}
				PORTB = 0x00;
 5b6:	18 ba       	out	0x18, r1	; 24
				cnt1 = 0, cnt=0;
 5b8:	10 92 00 01 	sts	0x0100, r1
 5bc:	10 92 01 01 	sts	0x0101, r1
 5c0:	10 92 02 01 	sts	0x0102, r1
 5c4:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 5c8:	80 91 00 01 	lds	r24, 0x0100
 5cc:	90 91 01 01 	lds	r25, 0x0101
 5d0:	a0 91 02 01 	lds	r26, 0x0102
 5d4:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTB = 0x00;
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 5d8:	89 2b       	or	r24, r25
 5da:	b1 f3       	breq	.-20     	; 0x5c8 <pwm_test_B+0x1b2>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 5dc:	10 92 00 01 	sts	0x0100, r1
 5e0:	10 92 01 01 	sts	0x0101, r1
 5e4:	10 92 02 01 	sts	0x0102, r1
 5e8:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 5ec:	80 91 00 01 	lds	r24, 0x0100
 5f0:	90 91 01 01 	lds	r25, 0x0101
 5f4:	a0 91 02 01 	lds	r26, 0x0102
 5f8:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 5fc:	89 2b       	or	r24, r25
 5fe:	b1 f3       	breq	.-20     	; 0x5ec <pwm_test_B+0x1d6>
 600:	4a c0       	rjmp	.+148    	; 0x696 <pwm_test_B+0x280>
					cnt1 = cnt;
				}
			}
			else
			{
				PORTB = 0x07;			
 602:	68 bb       	out	0x18, r22	; 24
				cnt1 = 0, cnt=0;
 604:	10 92 00 01 	sts	0x0100, r1
 608:	10 92 01 01 	sts	0x0101, r1
 60c:	10 92 02 01 	sts	0x0102, r1
 610:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 614:	80 91 00 01 	lds	r24, 0x0100
 618:	90 91 01 01 	lds	r25, 0x0101
 61c:	a0 91 02 01 	lds	r26, 0x0102
 620:	b0 91 03 01 	lds	r27, 0x0103
			}
			else
			{
				PORTB = 0x07;			
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 624:	89 2b       	or	r24, r25
 626:	b1 f3       	breq	.-20     	; 0x614 <pwm_test_B+0x1fe>
				{
					cnt1 = cnt;
				}
				PORTB = 0x00;
 628:	18 ba       	out	0x18, r1	; 24
				cnt1 = 0, cnt=0;
 62a:	10 92 00 01 	sts	0x0100, r1
 62e:	10 92 01 01 	sts	0x0101, r1
 632:	10 92 02 01 	sts	0x0102, r1
 636:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 63a:	80 91 00 01 	lds	r24, 0x0100
 63e:	90 91 01 01 	lds	r25, 0x0101
 642:	a0 91 02 01 	lds	r26, 0x0102
 646:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTB = 0x00;
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 64a:	89 2b       	or	r24, r25
 64c:	b1 f3       	breq	.-20     	; 0x63a <pwm_test_B+0x224>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 64e:	10 92 00 01 	sts	0x0100, r1
 652:	10 92 01 01 	sts	0x0101, r1
 656:	10 92 02 01 	sts	0x0102, r1
 65a:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 65e:	80 91 00 01 	lds	r24, 0x0100
 662:	90 91 01 01 	lds	r25, 0x0101
 666:	a0 91 02 01 	lds	r26, 0x0102
 66a:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 66e:	89 2b       	or	r24, r25
 670:	b1 f3       	breq	.-20     	; 0x65e <pwm_test_B+0x248>
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
 672:	10 92 00 01 	sts	0x0100, r1
 676:	10 92 01 01 	sts	0x0101, r1
 67a:	10 92 02 01 	sts	0x0102, r1
 67e:	10 92 03 01 	sts	0x0103, r1
				while(cnt1==0)
				{
					cnt1 = cnt;
 682:	80 91 00 01 	lds	r24, 0x0100
 686:	90 91 01 01 	lds	r25, 0x0101
 68a:	a0 91 02 01 	lds	r26, 0x0102
 68e:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1==0)
				{
					cnt1 = cnt;
				}
				cnt1 = 0, cnt=0;
				while(cnt1==0)
 692:	89 2b       	or	r24, r25
 694:	b1 f3       	breq	.-20     	; 0x682 <pwm_test_B+0x26c>
					cnt1 = cnt;
				}
			}
		}
		bit_to_check = bit_to_check >> 1;
		flag++;
 696:	2f 5f       	subi	r18, 0xFF	; 255
 698:	3f 4f       	sbci	r19, 0xFF	; 255

unsigned int pwm_test_B(char data)
{
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0;
	while(flag<4)
 69a:	24 30       	cpi	r18, 0x04	; 4
 69c:	31 05       	cpc	r19, r1
 69e:	19 f0       	breq	.+6      	; 0x6a6 <pwm_test_B+0x290>
				{
					cnt1 = cnt;
				}
			}
		}
		bit_to_check = bit_to_check >> 1;
 6a0:	94 2f       	mov	r25, r20
 6a2:	96 95       	lsr	r25
 6a4:	bd ce       	rjmp	.-646    	; 0x420 <pwm_test_B+0xa>
		flag++;
	}
}
 6a6:	08 95       	ret

000006a8 <end_space>:


unsigned int end_space(){
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	30 e0       	ldi	r19, 0x00	; 0
	
	unsigned int i=0,cnt1=0;
	for(i=0;i<8;i++)
	{
		PORTA = 0x00;
 6ac:	1b ba       	out	0x1b, r1	; 27
		cnt1 = 0, cnt=0;
 6ae:	10 92 00 01 	sts	0x0100, r1
 6b2:	10 92 01 01 	sts	0x0101, r1
 6b6:	10 92 02 01 	sts	0x0102, r1
 6ba:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 6be:	80 91 00 01 	lds	r24, 0x0100
 6c2:	90 91 01 01 	lds	r25, 0x0101
 6c6:	a0 91 02 01 	lds	r26, 0x0102
 6ca:	b0 91 03 01 	lds	r27, 0x0103
	unsigned int i=0,cnt1=0;
	for(i=0;i<8;i++)
	{
		PORTA = 0x00;
		cnt1 = 0, cnt=0;
		while(cnt1==0)
 6ce:	89 2b       	or	r24, r25
 6d0:	b1 f3       	breq	.-20     	; 0x6be <end_space+0x16>


unsigned int end_space(){
	
	unsigned int i=0,cnt1=0;
	for(i=0;i<8;i++)
 6d2:	2f 5f       	subi	r18, 0xFF	; 255
 6d4:	3f 4f       	sbci	r19, 0xFF	; 255
 6d6:	28 30       	cpi	r18, 0x08	; 8
 6d8:	31 05       	cpc	r19, r1
 6da:	41 f7       	brne	.-48     	; 0x6ac <end_space+0x4>
		while(cnt1==0)
		{
			cnt1 = cnt;
		}
	}
}
 6dc:	08 95       	ret

000006de <getSensorData>:

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 6de:	5d 9b       	sbis	0x0b, 5	; 11
 6e0:	fe cf       	rjmp	.-4      	; 0x6de <getSensorData>
UDR0=data;
 6e2:	82 e4       	ldi	r24, 0x42	; 66
 6e4:	8c b9       	out	0x0c, r24	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 6e6:	5d 9b       	sbis	0x0b, 5	; 11
 6e8:	fe cf       	rjmp	.-4      	; 0x6e6 <getSensorData+0x8>
UDR0=data;
 6ea:	8d e4       	ldi	r24, 0x4D	; 77
 6ec:	8c b9       	out	0x0c, r24	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 6ee:	5d 9b       	sbis	0x0b, 5	; 11
 6f0:	fe cf       	rjmp	.-4      	; 0x6ee <getSensorData+0x10>
UDR0=data;
 6f2:	82 ee       	ldi	r24, 0xE2	; 226
 6f4:	8c b9       	out	0x0c, r24	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 6f6:	5d 9b       	sbis	0x0b, 5	; 11
 6f8:	fe cf       	rjmp	.-4      	; 0x6f6 <getSensorData+0x18>
UDR0=data;
 6fa:	1c b8       	out	0x0c, r1	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 6fc:	5d 9b       	sbis	0x0b, 5	; 11
 6fe:	fe cf       	rjmp	.-4      	; 0x6fc <getSensorData+0x1e>
UDR0=data;
 700:	1c b8       	out	0x0c, r1	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 702:	5d 9b       	sbis	0x0b, 5	; 11
 704:	fe cf       	rjmp	.-4      	; 0x702 <getSensorData+0x24>
UDR0=data;
 706:	1c b8       	out	0x0c, r1	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 708:	5d 9b       	sbis	0x0b, 5	; 11
 70a:	fe cf       	rjmp	.-4      	; 0x708 <getSensorData+0x2a>
UDR0=data;
 70c:	1c b8       	out	0x0c, r1	; 12
 70e:	e4 e0       	ldi	r30, 0x04	; 4
 710:	f1 e0       	ldi	r31, 0x01	; 1

unsigned int Rxdata (void)
{

	// Wait for empty transmit buffer 
	while ( !(UCSR0A & (1<<RXC0)) );
 712:	5f 9b       	sbis	0x0b, 7	; 11
 714:	fe cf       	rjmp	.-4      	; 0x712 <getSensorData+0x34>

	// Receive data from buffer, return the data 
	return UDR0;	
 716:	8c b1       	in	r24, 0x0c	; 12

	for(ctr=0; ctr <32; ctr++)
		{
					

			data[ctr] = Rxdata();
 718:	81 93       	st	Z+, r24
	transmit0(0x00);
	transmit0(0x00);
	transmit0(0x00);
	transmit0(0x00);

	for(ctr=0; ctr <32; ctr++)
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	e4 32       	cpi	r30, 0x24	; 36
 71e:	f8 07       	cpc	r31, r24
 720:	c1 f7       	brne	.-16     	; 0x712 <getSensorData+0x34>
		
		}

	return data;

}
 722:	cf 01       	movw	r24, r30
 724:	80 97       	sbiw	r24, 0x20	; 32
 726:	08 95       	ret

00000728 <main>:

//Main Function----------------------------------------------------------------------------

int main(void)
{   
 728:	1f 93       	push	r17
	serial_init();
 72a:	0e 94 67 00 	call	0xce	; 0xce <serial_init>
	Timer1_init();
 72e:	0e 94 7a 00 	call	0xf4	; 0xf4 <Timer1_init>
	DDRD=0xFF;
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	81 bb       	out	0x11, r24	; 17
	DDRB=0xFF;
 736:	87 bb       	out	0x17, r24	; 23
	TIMSK |= 0x04;
 738:	97 b7       	in	r25, 0x37	; 55
 73a:	94 60       	ori	r25, 0x04	; 4
 73c:	97 bf       	out	0x37, r25	; 55
	SREG |= 0x80;
 73e:	9f b7       	in	r25, 0x3f	; 63
 740:	90 68       	ori	r25, 0x80	; 128
 742:	9f bf       	out	0x3f, r25	; 63
	DDRA=0xFF;		//sets portA pins as output 
 744:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xFF;
 746:	84 bb       	out	0x14, r24	; 20
	DDRF=0xFF;
 748:	80 93 61 00 	sts	0x0061, r24
		pwm_test_B(0x75);
		pwm_test_B(0x85);
		end_space();*/
		
	
	PORTA ^= 0x01;
 74c:	11 e0       	ldi	r17, 0x01	; 1
	while(1){


//		getSensorData();

		pwm_test(0x1B);
 74e:	8b e1       	ldi	r24, 0x1B	; 27
 750:	0e 94 c2 00 	call	0x184	; 0x184 <pwm_test>
		pwm_test(0x15);
 754:	85 e1       	ldi	r24, 0x15	; 21
 756:	0e 94 c2 00 	call	0x184	; 0x184 <pwm_test>
		pwm_test(0x25);
 75a:	85 e2       	ldi	r24, 0x25	; 37
 75c:	0e 94 c2 00 	call	0x184	; 0x184 <pwm_test>
		pwm_test(0x35);
 760:	85 e3       	ldi	r24, 0x35	; 53
 762:	0e 94 c2 00 	call	0x184	; 0x184 <pwm_test>
		pwm_test(0x45);
 766:	85 e4       	ldi	r24, 0x45	; 69
 768:	0e 94 c2 00 	call	0x184	; 0x184 <pwm_test>
		end_space();
 76c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <end_space>
		pwm_test_B(0x75);
		pwm_test_B(0x85);
		end_space();*/
		
	
	PORTA ^= 0x01;
 770:	8b b3       	in	r24, 0x1b	; 27
 772:	81 27       	eor	r24, r17
 774:	8b bb       	out	0x1b, r24	; 27
 776:	eb cf       	rjmp	.-42     	; 0x74e <main+0x26>

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
