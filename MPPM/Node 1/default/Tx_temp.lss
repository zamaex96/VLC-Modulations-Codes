
Tx_temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  0000084e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000084e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000dd  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000035a  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000188  00000000  00000000  00000ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000752  00000000  00000000  00000e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016a  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d5  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 b7 03 	call	0x76e	; 0x76e <main>
  c6:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <serial_init>:
{
  unsigned int baudrate[15] ={416,207,103,68,51,34,25,16,12,8,3,3,1,0};
 


  UBRR1L = baudrate[2]; 
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = baudrate[2]>>8;      
  d4:	10 92 98 00 	sts	0x0098, r1
  
  UBRR0L = baudrate[2];
  d8:	89 b9       	out	0x09, r24	; 9
  UBRR0H = baudrate[2]>>8;               // 4:19200bps; 6:38400; 7:57600; 8:76800; 9;115200
  da:	10 92 90 00 	sts	0x0090, r1
  


  
  UCSR1C = (1 << UCSZ1) | (1 << UCSZ0);  // no parity ,  stop bit 1 , data 8
  de:	96 e0       	ldi	r25, 0x06	; 6
  e0:	90 93 9d 00 	sts	0x009D, r25
 UCSR1B = (1 << TXEN1) | (1 << RXEN1);
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	80 93 9a 00 	sts	0x009A, r24
  // UCSR1A = (1 << U2X0);                //double baudrate 
 UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);  //serial 8-bit format. no parity, stop bit 1, data 8
  ea:	90 93 95 00 	sts	0x0095, r25
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);    //enable tx rx located in control reg UCSR1B
  ee:	8a b9       	out	0x0a, r24	; 10
                                         //When set, these two bits turn on the serial buffers to allow for serial communications
}
  f0:	08 95       	ret

000000f2 <Timer1_init>:
{

	//unsigned int cycles;
	unsigned long cycles;
  	// Initializing Timer
	TCCR1A = 0;                 // clear control register A 
  f2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << WGM13); // set mode 8: phase and frequency correct pwm, stop the timer
  f4:	8e b5       	in	r24, 0x2e	; 46
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	8e bd       	out	0x2e, r24	; 46
 	
	unsigned char oldSREG = SREG;
  fa:	2f b7       	in	r18, 0x3f	; 63
	cli();
  fc:	f8 94       	cli

	//cycles = 20; // 2/(16000000/8)*10 = 10us, *20 = 20us (50KHz)
	cycles = 50;	// 2/(16000000/64)*125 = 1ms , *25 = 0.2ms
	ICR1 = cycles;
  fe:	82 e3       	ldi	r24, 0x32	; 50
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	97 bd       	out	0x27, r25	; 39
 104:	86 bd       	out	0x26, r24	; 38
	//sei();
	SREG = oldSREG;
 106:	2f bf       	out	0x3f, r18	; 63

	
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
 108:	8e b5       	in	r24, 0x2e	; 46
 10a:	88 7f       	andi	r24, 0xF8	; 248
 10c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11);	// prescale: clk / 8
 10e:	8e b5       	in	r24, 0x2e	; 46
 110:	82 60       	ori	r24, 0x02	; 2
 112:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64

	

}
 114:	08 95       	ret

00000116 <__vector_14>:

ISR(TIMER1_OVF_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
	cnt++;
 128:	80 91 00 01 	lds	r24, 0x0100
 12c:	90 91 01 01 	lds	r25, 0x0101
 130:	a0 91 02 01 	lds	r26, 0x0102
 134:	b0 91 03 01 	lds	r27, 0x0103
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	a1 1d       	adc	r26, r1
 13c:	b1 1d       	adc	r27, r1
 13e:	80 93 00 01 	sts	0x0100, r24
 142:	90 93 01 01 	sts	0x0101, r25
 146:	a0 93 02 01 	sts	0x0102, r26
 14a:	b0 93 03 01 	sts	0x0103, r27
}
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <transmit0>:


void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 160:	5d 9b       	sbis	0x0b, 5	; 11
 162:	fe cf       	rjmp	.-4      	; 0x160 <transmit0>
UDR0=data;
 164:	8c b9       	out	0x0c, r24	; 12

}
 166:	08 95       	ret

00000168 <Rxdata>:

unsigned int Rxdata (void)
{

	// Wait for empty transmit buffer 
	while ( !(UCSR0A & (1<<RXC0)) );
 168:	5f 9b       	sbis	0x0b, 7	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <Rxdata>

	// Receive data from buffer, return the data 
	return UDR0;	
 16c:	8c b1       	in	r24, 0x0c	; 12

}
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	08 95       	ret

00000172 <Rxdata1>:

unsigned int Rxdata1 (void)
{

	// Wait for empty transmit buffer 
	while ( !(UCSR1A & (1<<RXC1)) );
 172:	80 91 9b 00 	lds	r24, 0x009B
 176:	87 ff       	sbrs	r24, 7
 178:	fc cf       	rjmp	.-8      	; 0x172 <Rxdata1>

	// Receive data from buffer, return the data 
	return UDR1;	
 17a:	80 91 9c 00 	lds	r24, 0x009C

}
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret

00000182 <transmit1>:

void transmit1(unsigned char data)
{
 182:	98 2f       	mov	r25, r24
while(!(UCSR1A & (1<<UDRE1)));
 184:	80 91 9b 00 	lds	r24, 0x009B
 188:	85 ff       	sbrs	r24, 5
 18a:	fc cf       	rjmp	.-8      	; 0x184 <transmit1+0x2>
UDR1=data;
 18c:	90 93 9c 00 	sts	0x009C, r25

}
 190:	08 95       	ret

00000192 <send_code_portD>:

unsigned int send_code_portD(char data)
{
 192:	58 2f       	mov	r21, r24
 194:	90 e8       	ldi	r25, 0x80	; 128
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0

			}

			else
			{
				PORTD= 0x07;
 19a:	67 e0       	ldi	r22, 0x07	; 7
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0;
	while(flag<8)
	{
			
		if (!(CHECKBIT(data, bit_to_check)))
 19c:	89 2f       	mov	r24, r25
 19e:	85 23       	and	r24, r21
 1a0:	49 2f       	mov	r20, r25
 1a2:	46 95       	lsr	r20
 1a4:	88 23       	and	r24, r24
 1a6:	09 f0       	breq	.+2      	; 0x1aa <send_code_portD+0x18>
 1a8:	9b c0       	rjmp	.+310    	; 0x2e0 <send_code_portD+0x14e>
		{
			bit_to_check = bit_to_check >> 1;
			if(!(CHECKBIT(data, bit_to_check)))
 1aa:	84 2f       	mov	r24, r20
 1ac:	85 23       	and	r24, r21
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <send_code_portD+0x20>
 1b0:	4b c0       	rjmp	.+150    	; 0x248 <send_code_portD+0xb6>
			{
				PORTD= 0x07;
 1b2:	62 bb       	out	0x12, r22	; 18
				cnt1 =0, cnt = 0;
 1b4:	10 92 00 01 	sts	0x0100, r1
 1b8:	10 92 01 01 	sts	0x0101, r1
 1bc:	10 92 02 01 	sts	0x0102, r1
 1c0:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 1c4:	80 91 00 01 	lds	r24, 0x0100
 1c8:	90 91 01 01 	lds	r25, 0x0101
 1cc:	a0 91 02 01 	lds	r26, 0x0102
 1d0:	b0 91 03 01 	lds	r27, 0x0103
			bit_to_check = bit_to_check >> 1;
			if(!(CHECKBIT(data, bit_to_check)))
			{
				PORTD= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 1d4:	89 2b       	or	r24, r25
 1d6:	b1 f3       	breq	.-20     	; 0x1c4 <send_code_portD+0x32>
				{
					cnt1 = cnt;
				}
				//PORTD= 0x07;
				cnt1 =0, cnt = 0;
 1d8:	10 92 00 01 	sts	0x0100, r1
 1dc:	10 92 01 01 	sts	0x0101, r1
 1e0:	10 92 02 01 	sts	0x0102, r1
 1e4:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 1e8:	80 91 00 01 	lds	r24, 0x0100
 1ec:	90 91 01 01 	lds	r25, 0x0101
 1f0:	a0 91 02 01 	lds	r26, 0x0102
 1f4:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				//PORTD= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 1f8:	89 2b       	or	r24, r25
 1fa:	b1 f3       	breq	.-20     	; 0x1e8 <send_code_portD+0x56>
				{
					cnt1 = cnt;
				}
				PORTD= 0x00;
 1fc:	12 ba       	out	0x12, r1	; 18
				cnt1 =0, cnt = 0;
 1fe:	10 92 00 01 	sts	0x0100, r1
 202:	10 92 01 01 	sts	0x0101, r1
 206:	10 92 02 01 	sts	0x0102, r1
 20a:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 20e:	80 91 00 01 	lds	r24, 0x0100
 212:	90 91 01 01 	lds	r25, 0x0101
 216:	a0 91 02 01 	lds	r26, 0x0102
 21a:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTD= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 21e:	89 2b       	or	r24, r25
 220:	b1 f3       	breq	.-20     	; 0x20e <send_code_portD+0x7c>
				{
					cnt1 = cnt;
				}
				cnt1 =0, cnt = 0;
 222:	10 92 00 01 	sts	0x0100, r1
 226:	10 92 01 01 	sts	0x0101, r1
 22a:	10 92 02 01 	sts	0x0102, r1
 22e:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 232:	80 91 00 01 	lds	r24, 0x0100
 236:	90 91 01 01 	lds	r25, 0x0101
 23a:	a0 91 02 01 	lds	r26, 0x0102
 23e:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1 == 0)
				{
					cnt1 = cnt;
				}
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 242:	89 2b       	or	r24, r25
 244:	b1 f3       	breq	.-20     	; 0x232 <send_code_portD+0xa0>
 246:	e8 c0       	rjmp	.+464    	; 0x418 <send_code_portD+0x286>
					cnt1 = cnt;
				}
			}
			else
			{
				PORTD= 0x00;
 248:	12 ba       	out	0x12, r1	; 18
				cnt1 =0, cnt = 0;
 24a:	10 92 00 01 	sts	0x0100, r1
 24e:	10 92 01 01 	sts	0x0101, r1
 252:	10 92 02 01 	sts	0x0102, r1
 256:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 25a:	80 91 00 01 	lds	r24, 0x0100
 25e:	90 91 01 01 	lds	r25, 0x0101
 262:	a0 91 02 01 	lds	r26, 0x0102
 266:	b0 91 03 01 	lds	r27, 0x0103
			}
			else
			{
				PORTD= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 26a:	89 2b       	or	r24, r25
 26c:	b1 f3       	breq	.-20     	; 0x25a <send_code_portD+0xc8>
				{
					cnt1 = cnt;
				}
				PORTD= 0x07;
 26e:	62 bb       	out	0x12, r22	; 18
				cnt1 =0, cnt = 0;
 270:	10 92 00 01 	sts	0x0100, r1
 274:	10 92 01 01 	sts	0x0101, r1
 278:	10 92 02 01 	sts	0x0102, r1
 27c:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 280:	80 91 00 01 	lds	r24, 0x0100
 284:	90 91 01 01 	lds	r25, 0x0101
 288:	a0 91 02 01 	lds	r26, 0x0102
 28c:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTD= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 290:	89 2b       	or	r24, r25
 292:	b1 f3       	breq	.-20     	; 0x280 <send_code_portD+0xee>
				{
					cnt1 = cnt;
				}
				
				cnt1 =0, cnt = 0;
 294:	10 92 00 01 	sts	0x0100, r1
 298:	10 92 01 01 	sts	0x0101, r1
 29c:	10 92 02 01 	sts	0x0102, r1
 2a0:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 2a4:	80 91 00 01 	lds	r24, 0x0100
 2a8:	90 91 01 01 	lds	r25, 0x0101
 2ac:	a0 91 02 01 	lds	r26, 0x0102
 2b0:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 2b4:	89 2b       	or	r24, r25
 2b6:	b1 f3       	breq	.-20     	; 0x2a4 <send_code_portD+0x112>
				{
					cnt1 = cnt;
				}
				//PORTD= 0x07;
				PORTD= 0x00;
 2b8:	12 ba       	out	0x12, r1	; 18
				cnt1 =0, cnt = 0;
 2ba:	10 92 00 01 	sts	0x0100, r1
 2be:	10 92 01 01 	sts	0x0101, r1
 2c2:	10 92 02 01 	sts	0x0102, r1
 2c6:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 2ca:	80 91 00 01 	lds	r24, 0x0100
 2ce:	90 91 01 01 	lds	r25, 0x0101
 2d2:	a0 91 02 01 	lds	r26, 0x0102
 2d6:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}
				//PORTD= 0x07;
				PORTD= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 2da:	89 2b       	or	r24, r25
 2dc:	b1 f3       	breq	.-20     	; 0x2ca <send_code_portD+0x138>
 2de:	9c c0       	rjmp	.+312    	; 0x418 <send_code_portD+0x286>
		//	PORTD= 0x00;
		}
		else
		{	
			bit_to_check = bit_to_check >> 1;
			if(!(CHECKBIT(data, bit_to_check)))
 2e0:	84 2f       	mov	r24, r20
 2e2:	85 23       	and	r24, r21
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <send_code_portD+0x156>
 2e6:	4c c0       	rjmp	.+152    	; 0x380 <send_code_portD+0x1ee>
			{
				PORTD= 0x00;
 2e8:	12 ba       	out	0x12, r1	; 18
				cnt1 =0, cnt = 0;
 2ea:	10 92 00 01 	sts	0x0100, r1
 2ee:	10 92 01 01 	sts	0x0101, r1
 2f2:	10 92 02 01 	sts	0x0102, r1
 2f6:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 2fa:	80 91 00 01 	lds	r24, 0x0100
 2fe:	90 91 01 01 	lds	r25, 0x0101
 302:	a0 91 02 01 	lds	r26, 0x0102
 306:	b0 91 03 01 	lds	r27, 0x0103
			bit_to_check = bit_to_check >> 1;
			if(!(CHECKBIT(data, bit_to_check)))
			{
				PORTD= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 30a:	89 2b       	or	r24, r25
 30c:	b1 f3       	breq	.-20     	; 0x2fa <send_code_portD+0x168>
				{
					cnt1 = cnt;
				}

			//	PORTD= 0x00;
				cnt1 =0, cnt = 0;
 30e:	10 92 00 01 	sts	0x0100, r1
 312:	10 92 01 01 	sts	0x0101, r1
 316:	10 92 02 01 	sts	0x0102, r1
 31a:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 31e:	80 91 00 01 	lds	r24, 0x0100
 322:	90 91 01 01 	lds	r25, 0x0101
 326:	a0 91 02 01 	lds	r26, 0x0102
 32a:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}

			//	PORTD= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 32e:	89 2b       	or	r24, r25
 330:	b1 f3       	breq	.-20     	; 0x31e <send_code_portD+0x18c>
				{
					cnt1 = cnt;
				}

				PORTD= 0x07;
 332:	62 bb       	out	0x12, r22	; 18
				cnt1 =0, cnt = 0;
 334:	10 92 00 01 	sts	0x0100, r1
 338:	10 92 01 01 	sts	0x0101, r1
 33c:	10 92 02 01 	sts	0x0102, r1
 340:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 344:	80 91 00 01 	lds	r24, 0x0100
 348:	90 91 01 01 	lds	r25, 0x0101
 34c:	a0 91 02 01 	lds	r26, 0x0102
 350:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}

				PORTD= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 354:	89 2b       	or	r24, r25
 356:	b1 f3       	breq	.-20     	; 0x344 <send_code_portD+0x1b2>
				{
					cnt1 = cnt;
				}

			
				cnt1 =0, cnt = 0;
 358:	10 92 00 01 	sts	0x0100, r1
 35c:	10 92 01 01 	sts	0x0101, r1
 360:	10 92 02 01 	sts	0x0102, r1
 364:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 368:	80 91 00 01 	lds	r24, 0x0100
 36c:	90 91 01 01 	lds	r25, 0x0101
 370:	a0 91 02 01 	lds	r26, 0x0102
 374:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}

			
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 378:	89 2b       	or	r24, r25
 37a:	b1 f3       	breq	.-20     	; 0x368 <send_code_portD+0x1d6>
				{
					cnt1 = cnt;
				}
				PORTD= 0x00;
 37c:	12 ba       	out	0x12, r1	; 18
 37e:	4c c0       	rjmp	.+152    	; 0x418 <send_code_portD+0x286>

			}

			else
			{
				PORTD= 0x07;
 380:	62 bb       	out	0x12, r22	; 18
				cnt1 =0, cnt = 0;
 382:	10 92 00 01 	sts	0x0100, r1
 386:	10 92 01 01 	sts	0x0101, r1
 38a:	10 92 02 01 	sts	0x0102, r1
 38e:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 392:	80 91 00 01 	lds	r24, 0x0100
 396:	90 91 01 01 	lds	r25, 0x0101
 39a:	a0 91 02 01 	lds	r26, 0x0102
 39e:	b0 91 03 01 	lds	r27, 0x0103

			else
			{
				PORTD= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 3a2:	89 2b       	or	r24, r25
 3a4:	b1 f3       	breq	.-20     	; 0x392 <send_code_portD+0x200>
				{
					cnt1 = cnt;
				}

				PORTD= 0x00;
 3a6:	12 ba       	out	0x12, r1	; 18
				cnt1 =0, cnt = 0;
 3a8:	10 92 00 01 	sts	0x0100, r1
 3ac:	10 92 01 01 	sts	0x0101, r1
 3b0:	10 92 02 01 	sts	0x0102, r1
 3b4:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 3b8:	80 91 00 01 	lds	r24, 0x0100
 3bc:	90 91 01 01 	lds	r25, 0x0101
 3c0:	a0 91 02 01 	lds	r26, 0x0102
 3c4:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}

				PORTD= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 3c8:	89 2b       	or	r24, r25
 3ca:	b1 f3       	breq	.-20     	; 0x3b8 <send_code_portD+0x226>
				{
					cnt1 = cnt;
				}

				PORTD= 0x07;
 3cc:	62 bb       	out	0x12, r22	; 18
				cnt1 =0, cnt = 0;
 3ce:	10 92 00 01 	sts	0x0100, r1
 3d2:	10 92 01 01 	sts	0x0101, r1
 3d6:	10 92 02 01 	sts	0x0102, r1
 3da:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 3de:	80 91 00 01 	lds	r24, 0x0100
 3e2:	90 91 01 01 	lds	r25, 0x0101
 3e6:	a0 91 02 01 	lds	r26, 0x0102
 3ea:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}

				PORTD= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 3ee:	89 2b       	or	r24, r25
 3f0:	b1 f3       	breq	.-20     	; 0x3de <send_code_portD+0x24c>
				{
					cnt1 = cnt;
				}
				PORTD= 0x00;
 3f2:	12 ba       	out	0x12, r1	; 18
				cnt1 =0, cnt = 0;
 3f4:	10 92 00 01 	sts	0x0100, r1
 3f8:	10 92 01 01 	sts	0x0101, r1
 3fc:	10 92 02 01 	sts	0x0102, r1
 400:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 404:	80 91 00 01 	lds	r24, 0x0100
 408:	90 91 01 01 	lds	r25, 0x0101
 40c:	a0 91 02 01 	lds	r26, 0x0102
 410:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTD= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 414:	89 2b       	or	r24, r25
 416:	b1 f3       	breq	.-20     	; 0x404 <send_code_portD+0x272>
					cnt1 = cnt;
				}
			//	PORTD= 0x00;
			}
		}
		flag=flag+2;
 418:	2e 5f       	subi	r18, 0xFE	; 254
 41a:	3f 4f       	sbci	r19, 0xFF	; 255

unsigned int send_code_portD(char data)
{
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0;
	while(flag<8)
 41c:	28 30       	cpi	r18, 0x08	; 8
 41e:	31 05       	cpc	r19, r1
 420:	19 f0       	breq	.+6      	; 0x428 <send_code_portD+0x296>
				}
			//	PORTD= 0x00;
			}
		}
		flag=flag+2;
		bit_to_check = bit_to_check >> 1;
 422:	94 2f       	mov	r25, r20
 424:	96 95       	lsr	r25
 426:	ba ce       	rjmp	.-652    	; 0x19c <send_code_portD+0xa>
			cnt1 = cnt;
		}
	}*/
	}
	return 1;
}
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	08 95       	ret

0000042e <send_code_portB>:


unsigned int send_code_portB(char data)
{
 42e:	58 2f       	mov	r21, r24
 430:	90 e8       	ldi	r25, 0x80	; 128
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0

			}

			else
			{
				PORTB= 0x07;
 436:	67 e0       	ldi	r22, 0x07	; 7
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0;
	while(flag<8)
	{
			
		if (!(CHECKBIT(data, bit_to_check)))
 438:	89 2f       	mov	r24, r25
 43a:	85 23       	and	r24, r21
 43c:	49 2f       	mov	r20, r25
 43e:	46 95       	lsr	r20
 440:	88 23       	and	r24, r24
 442:	09 f0       	breq	.+2      	; 0x446 <send_code_portB+0x18>
 444:	9b c0       	rjmp	.+310    	; 0x57c <send_code_portB+0x14e>
		{
			bit_to_check = bit_to_check >> 1;
			if(!(CHECKBIT(data, bit_to_check)))
 446:	84 2f       	mov	r24, r20
 448:	85 23       	and	r24, r21
 44a:	09 f0       	breq	.+2      	; 0x44e <send_code_portB+0x20>
 44c:	4b c0       	rjmp	.+150    	; 0x4e4 <send_code_portB+0xb6>
			{
				PORTB= 0x07;
 44e:	68 bb       	out	0x18, r22	; 24
				cnt1 =0, cnt = 0;
 450:	10 92 00 01 	sts	0x0100, r1
 454:	10 92 01 01 	sts	0x0101, r1
 458:	10 92 02 01 	sts	0x0102, r1
 45c:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 460:	80 91 00 01 	lds	r24, 0x0100
 464:	90 91 01 01 	lds	r25, 0x0101
 468:	a0 91 02 01 	lds	r26, 0x0102
 46c:	b0 91 03 01 	lds	r27, 0x0103
			bit_to_check = bit_to_check >> 1;
			if(!(CHECKBIT(data, bit_to_check)))
			{
				PORTB= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 470:	89 2b       	or	r24, r25
 472:	b1 f3       	breq	.-20     	; 0x460 <send_code_portB+0x32>
				{
					cnt1 = cnt;
				}
				//PORTD= 0x07;
				cnt1 =0, cnt = 0;
 474:	10 92 00 01 	sts	0x0100, r1
 478:	10 92 01 01 	sts	0x0101, r1
 47c:	10 92 02 01 	sts	0x0102, r1
 480:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 484:	80 91 00 01 	lds	r24, 0x0100
 488:	90 91 01 01 	lds	r25, 0x0101
 48c:	a0 91 02 01 	lds	r26, 0x0102
 490:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				//PORTD= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 494:	89 2b       	or	r24, r25
 496:	b1 f3       	breq	.-20     	; 0x484 <send_code_portB+0x56>
				{
					cnt1 = cnt;
				}
				PORTB= 0x00;
 498:	18 ba       	out	0x18, r1	; 24
				cnt1 =0, cnt = 0;
 49a:	10 92 00 01 	sts	0x0100, r1
 49e:	10 92 01 01 	sts	0x0101, r1
 4a2:	10 92 02 01 	sts	0x0102, r1
 4a6:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 4aa:	80 91 00 01 	lds	r24, 0x0100
 4ae:	90 91 01 01 	lds	r25, 0x0101
 4b2:	a0 91 02 01 	lds	r26, 0x0102
 4b6:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTB= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 4ba:	89 2b       	or	r24, r25
 4bc:	b1 f3       	breq	.-20     	; 0x4aa <send_code_portB+0x7c>
				{
					cnt1 = cnt;
				}
				cnt1 =0, cnt = 0;
 4be:	10 92 00 01 	sts	0x0100, r1
 4c2:	10 92 01 01 	sts	0x0101, r1
 4c6:	10 92 02 01 	sts	0x0102, r1
 4ca:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 4ce:	80 91 00 01 	lds	r24, 0x0100
 4d2:	90 91 01 01 	lds	r25, 0x0101
 4d6:	a0 91 02 01 	lds	r26, 0x0102
 4da:	b0 91 03 01 	lds	r27, 0x0103
				while(cnt1 == 0)
				{
					cnt1 = cnt;
				}
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 4de:	89 2b       	or	r24, r25
 4e0:	b1 f3       	breq	.-20     	; 0x4ce <send_code_portB+0xa0>
 4e2:	e8 c0       	rjmp	.+464    	; 0x6b4 <send_code_portB+0x286>
					cnt1 = cnt;
				}
			}
			else
			{
				PORTB= 0x00;
 4e4:	18 ba       	out	0x18, r1	; 24
				cnt1 =0, cnt = 0;
 4e6:	10 92 00 01 	sts	0x0100, r1
 4ea:	10 92 01 01 	sts	0x0101, r1
 4ee:	10 92 02 01 	sts	0x0102, r1
 4f2:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 4f6:	80 91 00 01 	lds	r24, 0x0100
 4fa:	90 91 01 01 	lds	r25, 0x0101
 4fe:	a0 91 02 01 	lds	r26, 0x0102
 502:	b0 91 03 01 	lds	r27, 0x0103
			}
			else
			{
				PORTB= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 506:	89 2b       	or	r24, r25
 508:	b1 f3       	breq	.-20     	; 0x4f6 <send_code_portB+0xc8>
				{
					cnt1 = cnt;
				}
				PORTB= 0x07;
 50a:	68 bb       	out	0x18, r22	; 24
				cnt1 =0, cnt = 0;
 50c:	10 92 00 01 	sts	0x0100, r1
 510:	10 92 01 01 	sts	0x0101, r1
 514:	10 92 02 01 	sts	0x0102, r1
 518:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 51c:	80 91 00 01 	lds	r24, 0x0100
 520:	90 91 01 01 	lds	r25, 0x0101
 524:	a0 91 02 01 	lds	r26, 0x0102
 528:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTB= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 52c:	89 2b       	or	r24, r25
 52e:	b1 f3       	breq	.-20     	; 0x51c <send_code_portB+0xee>
				{
					cnt1 = cnt;
				}
				
				cnt1 =0, cnt = 0;
 530:	10 92 00 01 	sts	0x0100, r1
 534:	10 92 01 01 	sts	0x0101, r1
 538:	10 92 02 01 	sts	0x0102, r1
 53c:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 540:	80 91 00 01 	lds	r24, 0x0100
 544:	90 91 01 01 	lds	r25, 0x0101
 548:	a0 91 02 01 	lds	r26, 0x0102
 54c:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 550:	89 2b       	or	r24, r25
 552:	b1 f3       	breq	.-20     	; 0x540 <send_code_portB+0x112>
				{
					cnt1 = cnt;
				}
				//PORTD= 0x07;
				PORTB= 0x00;
 554:	18 ba       	out	0x18, r1	; 24
				cnt1 =0, cnt = 0;
 556:	10 92 00 01 	sts	0x0100, r1
 55a:	10 92 01 01 	sts	0x0101, r1
 55e:	10 92 02 01 	sts	0x0102, r1
 562:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 566:	80 91 00 01 	lds	r24, 0x0100
 56a:	90 91 01 01 	lds	r25, 0x0101
 56e:	a0 91 02 01 	lds	r26, 0x0102
 572:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}
				//PORTD= 0x07;
				PORTB= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 576:	89 2b       	or	r24, r25
 578:	b1 f3       	breq	.-20     	; 0x566 <send_code_portB+0x138>
 57a:	9c c0       	rjmp	.+312    	; 0x6b4 <send_code_portB+0x286>
		//	PORTD= 0x00;
		}
		else
		{	
			bit_to_check = bit_to_check >> 1;
			if(!(CHECKBIT(data, bit_to_check)))
 57c:	84 2f       	mov	r24, r20
 57e:	85 23       	and	r24, r21
 580:	09 f0       	breq	.+2      	; 0x584 <send_code_portB+0x156>
 582:	4c c0       	rjmp	.+152    	; 0x61c <send_code_portB+0x1ee>
			{
				PORTB= 0x00;
 584:	18 ba       	out	0x18, r1	; 24
				cnt1 =0, cnt = 0;
 586:	10 92 00 01 	sts	0x0100, r1
 58a:	10 92 01 01 	sts	0x0101, r1
 58e:	10 92 02 01 	sts	0x0102, r1
 592:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 596:	80 91 00 01 	lds	r24, 0x0100
 59a:	90 91 01 01 	lds	r25, 0x0101
 59e:	a0 91 02 01 	lds	r26, 0x0102
 5a2:	b0 91 03 01 	lds	r27, 0x0103
			bit_to_check = bit_to_check >> 1;
			if(!(CHECKBIT(data, bit_to_check)))
			{
				PORTB= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 5a6:	89 2b       	or	r24, r25
 5a8:	b1 f3       	breq	.-20     	; 0x596 <send_code_portB+0x168>
				{
					cnt1 = cnt;
				}

			//	PORTD= 0x00;
				cnt1 =0, cnt = 0;
 5aa:	10 92 00 01 	sts	0x0100, r1
 5ae:	10 92 01 01 	sts	0x0101, r1
 5b2:	10 92 02 01 	sts	0x0102, r1
 5b6:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 5ba:	80 91 00 01 	lds	r24, 0x0100
 5be:	90 91 01 01 	lds	r25, 0x0101
 5c2:	a0 91 02 01 	lds	r26, 0x0102
 5c6:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}

			//	PORTD= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 5ca:	89 2b       	or	r24, r25
 5cc:	b1 f3       	breq	.-20     	; 0x5ba <send_code_portB+0x18c>
				{
					cnt1 = cnt;
				}

				PORTB= 0x07;
 5ce:	68 bb       	out	0x18, r22	; 24
				cnt1 =0, cnt = 0;
 5d0:	10 92 00 01 	sts	0x0100, r1
 5d4:	10 92 01 01 	sts	0x0101, r1
 5d8:	10 92 02 01 	sts	0x0102, r1
 5dc:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 5e0:	80 91 00 01 	lds	r24, 0x0100
 5e4:	90 91 01 01 	lds	r25, 0x0101
 5e8:	a0 91 02 01 	lds	r26, 0x0102
 5ec:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}

				PORTB= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 5f0:	89 2b       	or	r24, r25
 5f2:	b1 f3       	breq	.-20     	; 0x5e0 <send_code_portB+0x1b2>
				{
					cnt1 = cnt;
				}

			
				cnt1 =0, cnt = 0;
 5f4:	10 92 00 01 	sts	0x0100, r1
 5f8:	10 92 01 01 	sts	0x0101, r1
 5fc:	10 92 02 01 	sts	0x0102, r1
 600:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 604:	80 91 00 01 	lds	r24, 0x0100
 608:	90 91 01 01 	lds	r25, 0x0101
 60c:	a0 91 02 01 	lds	r26, 0x0102
 610:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}

			
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 614:	89 2b       	or	r24, r25
 616:	b1 f3       	breq	.-20     	; 0x604 <send_code_portB+0x1d6>
				{
					cnt1 = cnt;
				}
				PORTB= 0x00;
 618:	18 ba       	out	0x18, r1	; 24
 61a:	4c c0       	rjmp	.+152    	; 0x6b4 <send_code_portB+0x286>

			}

			else
			{
				PORTB= 0x07;
 61c:	68 bb       	out	0x18, r22	; 24
				cnt1 =0, cnt = 0;
 61e:	10 92 00 01 	sts	0x0100, r1
 622:	10 92 01 01 	sts	0x0101, r1
 626:	10 92 02 01 	sts	0x0102, r1
 62a:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 62e:	80 91 00 01 	lds	r24, 0x0100
 632:	90 91 01 01 	lds	r25, 0x0101
 636:	a0 91 02 01 	lds	r26, 0x0102
 63a:	b0 91 03 01 	lds	r27, 0x0103

			else
			{
				PORTB= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 63e:	89 2b       	or	r24, r25
 640:	b1 f3       	breq	.-20     	; 0x62e <send_code_portB+0x200>
				{
					cnt1 = cnt;
				}

				PORTB= 0x00;
 642:	18 ba       	out	0x18, r1	; 24
				cnt1 =0, cnt = 0;
 644:	10 92 00 01 	sts	0x0100, r1
 648:	10 92 01 01 	sts	0x0101, r1
 64c:	10 92 02 01 	sts	0x0102, r1
 650:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 654:	80 91 00 01 	lds	r24, 0x0100
 658:	90 91 01 01 	lds	r25, 0x0101
 65c:	a0 91 02 01 	lds	r26, 0x0102
 660:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}

				PORTB= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 664:	89 2b       	or	r24, r25
 666:	b1 f3       	breq	.-20     	; 0x654 <send_code_portB+0x226>
				{
					cnt1 = cnt;
				}

				PORTB= 0x07;
 668:	68 bb       	out	0x18, r22	; 24
				cnt1 =0, cnt = 0;
 66a:	10 92 00 01 	sts	0x0100, r1
 66e:	10 92 01 01 	sts	0x0101, r1
 672:	10 92 02 01 	sts	0x0102, r1
 676:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 67a:	80 91 00 01 	lds	r24, 0x0100
 67e:	90 91 01 01 	lds	r25, 0x0101
 682:	a0 91 02 01 	lds	r26, 0x0102
 686:	b0 91 03 01 	lds	r27, 0x0103
					cnt1 = cnt;
				}

				PORTB= 0x07;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 68a:	89 2b       	or	r24, r25
 68c:	b1 f3       	breq	.-20     	; 0x67a <send_code_portB+0x24c>
				{
					cnt1 = cnt;
				}
				PORTB= 0x00;
 68e:	18 ba       	out	0x18, r1	; 24
				cnt1 =0, cnt = 0;
 690:	10 92 00 01 	sts	0x0100, r1
 694:	10 92 01 01 	sts	0x0101, r1
 698:	10 92 02 01 	sts	0x0102, r1
 69c:	10 92 03 01 	sts	0x0103, r1
				while(cnt1 == 0)
				{
					cnt1 = cnt;
 6a0:	80 91 00 01 	lds	r24, 0x0100
 6a4:	90 91 01 01 	lds	r25, 0x0101
 6a8:	a0 91 02 01 	lds	r26, 0x0102
 6ac:	b0 91 03 01 	lds	r27, 0x0103
				{
					cnt1 = cnt;
				}
				PORTB= 0x00;
				cnt1 =0, cnt = 0;
				while(cnt1 == 0)
 6b0:	89 2b       	or	r24, r25
 6b2:	b1 f3       	breq	.-20     	; 0x6a0 <send_code_portB+0x272>
					cnt1 = cnt;
				}
			//	PORTD= 0x00;
			}
		}
		flag=flag+2;
 6b4:	2e 5f       	subi	r18, 0xFE	; 254
 6b6:	3f 4f       	sbci	r19, 0xFF	; 255

unsigned int send_code_portB(char data)
{
	unsigned char bit_to_check=0x80;
	unsigned int flag=0,cnt1=0;
	while(flag<8)
 6b8:	28 30       	cpi	r18, 0x08	; 8
 6ba:	31 05       	cpc	r19, r1
 6bc:	19 f0       	breq	.+6      	; 0x6c4 <send_code_portB+0x296>
				}
			//	PORTD= 0x00;
			}
		}
		flag=flag+2;
		bit_to_check = bit_to_check >> 1;
 6be:	94 2f       	mov	r25, r20
 6c0:	96 95       	lsr	r25
 6c2:	ba ce       	rjmp	.-652    	; 0x438 <send_code_portB+0xa>
			cnt1 = cnt;
		}
	}*/
	}
	return 1;
}
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	08 95       	ret

000006ca <new_data_send>:

unsigned int new_data_send(char data)
{
	int cnt1=0;
	
	PORTD = 0x07;
 6ca:	87 e0       	ldi	r24, 0x07	; 7
 6cc:	82 bb       	out	0x12, r24	; 18
	cnt1 = 0, cnt=0;
 6ce:	10 92 00 01 	sts	0x0100, r1
 6d2:	10 92 01 01 	sts	0x0101, r1
 6d6:	10 92 02 01 	sts	0x0102, r1
 6da:	10 92 03 01 	sts	0x0103, r1
	while(cnt1==0)
	{
		cnt1 = cnt;
 6de:	80 91 00 01 	lds	r24, 0x0100
 6e2:	90 91 01 01 	lds	r25, 0x0101
 6e6:	a0 91 02 01 	lds	r26, 0x0102
 6ea:	b0 91 03 01 	lds	r27, 0x0103
{
	int cnt1=0;
	
	PORTD = 0x07;
	cnt1 = 0, cnt=0;
	while(cnt1==0)
 6ee:	89 2b       	or	r24, r25
 6f0:	b1 f3       	breq	.-20     	; 0x6de <new_data_send+0x14>
	{
		cnt1 = cnt;
	}
	PORTD = 0x00;
 6f2:	12 ba       	out	0x12, r1	; 18
	
}
 6f4:	08 95       	ret

000006f6 <end_break>:

unsigned int end_break()
{
	int cnt1=0,i;
	
	PORTD = 0x00;
 6f6:	12 ba       	out	0x12, r1	; 18
 6f8:	20 e0       	ldi	r18, 0x00	; 0
 6fa:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0;i<16;i++)
	{
	cnt1 = 0, cnt=0;
 6fc:	10 92 00 01 	sts	0x0100, r1
 700:	10 92 01 01 	sts	0x0101, r1
 704:	10 92 02 01 	sts	0x0102, r1
 708:	10 92 03 01 	sts	0x0103, r1
	while(cnt1==0)
	{
		cnt1 = cnt;
 70c:	80 91 00 01 	lds	r24, 0x0100
 710:	90 91 01 01 	lds	r25, 0x0101
 714:	a0 91 02 01 	lds	r26, 0x0102
 718:	b0 91 03 01 	lds	r27, 0x0103
	
	PORTD = 0x00;
	for(i=0;i<16;i++)
	{
	cnt1 = 0, cnt=0;
	while(cnt1==0)
 71c:	89 2b       	or	r24, r25
 71e:	b1 f3       	breq	.-20     	; 0x70c <end_break+0x16>
unsigned int end_break()
{
	int cnt1=0,i;
	
	PORTD = 0x00;
	for(i=0;i<16;i++)
 720:	2f 5f       	subi	r18, 0xFF	; 255
 722:	3f 4f       	sbci	r19, 0xFF	; 255
 724:	20 31       	cpi	r18, 0x10	; 16
 726:	31 05       	cpc	r19, r1
 728:	49 f7       	brne	.-46     	; 0x6fc <end_break+0x6>
	while(cnt1==0)
	{
		cnt1 = cnt;
	}
	}
	PORTD = 0x00;
 72a:	12 ba       	out	0x12, r1	; 18
	return 0;
}
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	08 95       	ret

00000732 <end_breakB>:

unsigned int end_breakB()
{
	int cnt1=0,i;
	
	PORTD = 0x00;
 732:	12 ba       	out	0x12, r1	; 18
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0;i<16;i++)
	{
	cnt1 = 0, cnt=0;
 738:	10 92 00 01 	sts	0x0100, r1
 73c:	10 92 01 01 	sts	0x0101, r1
 740:	10 92 02 01 	sts	0x0102, r1
 744:	10 92 03 01 	sts	0x0103, r1
	while(cnt1==0)
	{
		cnt1 = cnt;
 748:	80 91 00 01 	lds	r24, 0x0100
 74c:	90 91 01 01 	lds	r25, 0x0101
 750:	a0 91 02 01 	lds	r26, 0x0102
 754:	b0 91 03 01 	lds	r27, 0x0103
	
	PORTD = 0x00;
	for(i=0;i<16;i++)
	{
	cnt1 = 0, cnt=0;
	while(cnt1==0)
 758:	89 2b       	or	r24, r25
 75a:	b1 f3       	breq	.-20     	; 0x748 <end_breakB+0x16>
unsigned int end_breakB()
{
	int cnt1=0,i;
	
	PORTD = 0x00;
	for(i=0;i<16;i++)
 75c:	2f 5f       	subi	r18, 0xFF	; 255
 75e:	3f 4f       	sbci	r19, 0xFF	; 255
 760:	20 31       	cpi	r18, 0x10	; 16
 762:	31 05       	cpc	r19, r1
 764:	49 f7       	brne	.-46     	; 0x738 <end_breakB+0x6>
	while(cnt1==0)
	{
		cnt1 = cnt;
	}
	}
	PORTD = 0x00;
 766:	12 ba       	out	0x12, r1	; 18
	return 0;
	
}
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	08 95       	ret

0000076e <main>:

int main(void)
{   
	unsigned int ctr,i=0,cnt1=0;
	unsigned char Rd[32],Rd1[32],data[10]={0,1,2,3,4,5,6,7,8,9};
	serial_init();
 76e:	0e 94 67 00 	call	0xce	; 0xce <serial_init>
	Timer1_init();
 772:	0e 94 79 00 	call	0xf2	; 0xf2 <Timer1_init>
	DDRA=0xFF;
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	8a bb       	out	0x1a, r24	; 26
	DDRD=0xFF;
 77a:	81 bb       	out	0x11, r24	; 17
	DDRB=0xFF;
 77c:	87 bb       	out	0x17, r24	; 23
	TIMSK |= 0x04;
 77e:	87 b7       	in	r24, 0x37	; 55
 780:	84 60       	ori	r24, 0x04	; 4
 782:	87 bf       	out	0x37, r24	; 55
	SREG |= 0x80;
 784:	8f b7       	in	r24, 0x3f	; 63
 786:	80 68       	ori	r24, 0x80	; 128
 788:	8f bf       	out	0x3f, r24	; 63
	PORTA = 0x01;
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	8b bb       	out	0x1b, r24	; 27
    while(1)
    {
		
	
		send_code_portD(0xFF);
 78e:	8f ef       	ldi	r24, 0xFF	; 255
 790:	0e 94 c9 00 	call	0x192	; 0x192 <send_code_portD>
		send_code_portD(0x01);
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	0e 94 c9 00 	call	0x192	; 0x192 <send_code_portD>
		send_code_portD(0x02);
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	0e 94 c9 00 	call	0x192	; 0x192 <send_code_portD>
		send_code_portD(0x03);
 7a0:	83 e0       	ldi	r24, 0x03	; 3
 7a2:	0e 94 c9 00 	call	0x192	; 0x192 <send_code_portD>
		send_code_portD(0x04);
 7a6:	84 e0       	ldi	r24, 0x04	; 4
 7a8:	0e 94 c9 00 	call	0x192	; 0x192 <send_code_portD>
		send_code_portD(0x05);
 7ac:	85 e0       	ldi	r24, 0x05	; 5
 7ae:	0e 94 c9 00 	call	0x192	; 0x192 <send_code_portD>
		send_code_portD(0x06);
 7b2:	86 e0       	ldi	r24, 0x06	; 6
 7b4:	0e 94 c9 00 	call	0x192	; 0x192 <send_code_portD>
		send_code_portD(0x07);
 7b8:	87 e0       	ldi	r24, 0x07	; 7
 7ba:	0e 94 c9 00 	call	0x192	; 0x192 <send_code_portD>
		send_code_portD(0x08);
 7be:	88 e0       	ldi	r24, 0x08	; 8
 7c0:	0e 94 c9 00 	call	0x192	; 0x192 <send_code_portD>
		send_code_portD(0x09);
 7c4:	89 e0       	ldi	r24, 0x09	; 9
 7c6:	0e 94 c9 00 	call	0x192	; 0x192 <send_code_portD>
		end_break();
 7ca:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <end_break>
		send_code_portB(0x17);
		send_code_portB(0x18);
		send_code_portB(0x19);
		end_breakB();*/
	
		PORTA ^= 0x01;
 7ce:	8b b3       	in	r24, 0x1b	; 27
 7d0:	91 e0       	ldi	r25, 0x01	; 1
 7d2:	89 27       	eor	r24, r25
 7d4:	db cf       	rjmp	.-74     	; 0x78c <main+0x1e>

000007d6 <_exit>:
 7d6:	f8 94       	cli

000007d8 <__stop_program>:
 7d8:	ff cf       	rjmp	.-2      	; 0x7d8 <__stop_program>
